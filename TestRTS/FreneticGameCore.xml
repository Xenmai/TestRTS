<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreneticGameCore</name>
    </assembly>
    <members>
        <member name="T:FreneticGameCore.AnimationEngine">
            <summary>
            System for animations.
            </summary>
        </member>
        <member name="M:FreneticGameCore.AnimationEngine.#ctor">
            <summary>
            Constructs the animation helper.
            </summary>
        </member>
        <member name="F:FreneticGameCore.AnimationEngine.HeadBones">
            <summary>
            The usual head bones.
            </summary>
        </member>
        <member name="F:FreneticGameCore.AnimationEngine.LegBones">
            <summary>
            The usual leg bones.
            </summary>
        </member>
        <member name="F:FreneticGameCore.AnimationEngine.Animations">
            <summary>
            All known animations.
            </summary>
        </member>
        <member name="M:FreneticGameCore.AnimationEngine.GetAnimation(System.String,FreneticGameCore.Files.FileHandler)">
            <summary>
            Gets an animation by name.
            </summary>
            <param name="name">The name.</param>
            <param name="Files">The file system.</param>
            <returns>The animation.</returns>
        </member>
        <member name="M:FreneticGameCore.AnimationEngine.LoadAnimation(System.String,FreneticGameCore.Files.FileHandler)">
            <summary>
            Loads an animation by name.
            </summary>
            <param name="name">The name.</param>
            <param name="Files">The file system.</param>
            <returns>The animation.</returns>
        </member>
        <member name="T:FreneticGameCore.SingleAnimation">
            <summary>
            Represents one single animation.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimation.Name">
            <summary>
            The name of the animation.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimation.Length">
            <summary>
            The length in seconds.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimation.Engine">
            <summary>
            The backing engine.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimation.Nodes">
            <summary>
            All nodes in the animation.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimation.node_map">
            <summary>
            A mapping of nodes.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SingleAnimation.GetNode(System.String)">
            <summary>
            Gets a node by name.
            </summary>
            <param name="name">The name of it.</param>
            <returns>The node.</returns>
        </member>
        <member name="T:FreneticGameCore.SingleAnimationNode">
            <summary>
            A single node in an animation.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimationNode.Name">
            <summary>
            Tne name of the node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimationNode.Parent">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimationNode.ParentName">
            <summary>
            The name of the parent.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimationNode.Offset">
            <summary>
            The offset.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimationNode.PosTimes">
            <summary>
            The position time stamps.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimationNode.Positions">
            <summary>
            The positions.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimationNode.RotTimes">
            <summary>
            The rotation time stamps.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SingleAnimationNode.Rotations">
            <summary>
            The rotations.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SingleAnimationNode.FindPos(System.Double)">
            <summary>
            Finds a position by time.
            </summary>
            <param name="time">The time.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:FreneticGameCore.SingleAnimationNode.LerpPos(System.Double)">
            <summary>
            Lerps a position by time.
            </summary>
            <param name="aTime">The time.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:FreneticGameCore.SingleAnimationNode.FindRotate(System.Double)">
            <summary>
            Finds a rotation by time.
            </summary>
            <param name="time">The time.</param>
            <returns>The rotation.</returns>
        </member>
        <member name="M:FreneticGameCore.SingleAnimationNode.LerpRotate(System.Double)">
            <summary>
            Lerps a rotation by time.
            </summary>
            <param name="aTime">The time.</param>
            <returns>The rotation.</returns>
        </member>
        <member name="M:FreneticGameCore.SingleAnimationNode.GetBoneTotalMatrix(System.Double,System.Collections.Generic.Dictionary{System.String,BEPUutilities.Matrix})">
            <summary>
            Gets the final matrix for a bone.
            </summary>
            <param name="aTime">The time.</param>
            <param name="adjs">The adjustments if any.</param>
            <returns>The resultant matrix.</returns>
        </member>
        <member name="T:FreneticGameCore.BasicEngine`2">
            <summary>
            Represents the common code shared by a server and client engine.
            </summary>
        </member>
        <member name="F:FreneticGameCore.BasicEngine`2.PhysicsWorld">
            <summary>
            The general-purpose physics world.
            </summary>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.LoadBasic">
            <summary>
            Loads the basic engine.
            </summary>
        </member>
        <member name="F:FreneticGameCore.BasicEngine`2.Source">
            <summary>
            The source object for this engine. Set to any tag style constant reference you find most helpful to keep!
            </summary>
        </member>
        <member name="F:FreneticGameCore.BasicEngine`2.Delta">
            <summary>
            Current frame delta (seconds).
            </summary>
        </member>
        <member name="F:FreneticGameCore.BasicEngine`2.GlobalTickTime">
            <summary>
            How long the game has run (seconds).
            </summary>
        </member>
        <member name="F:FreneticGameCore.BasicEngine`2.Schedule">
            <summary>
            The general purpose scheduler.
            </summary>
        </member>
        <member name="F:FreneticGameCore.BasicEngine`2.Entities">
            <summary>
            All entities currently on this server, if EIDs are used.
            </summary>
        </member>
        <member name="F:FreneticGameCore.BasicEngine`2.EntityList">
            <summary>
            All entities currently on the server.
            </summary>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.EntityListDuplicate">
            <summary>
            Returns a duplicate of the entity list, for when you expect the master list to change.
            </summary>
            <returns>The duplicate.</returns>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.AddEntity(`0)">
            <summary>
            Adds an entity to the server, quick and deadly. Prefer spawn over this.
            </summary>
            <param name="be">The entity.</param>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.RemoveEntity(`0)">
            <summary>
            Removes an entity from the list, quick and deadly. Prefer despawn over this.
            </summary>
            <param name="be">The entity to remove.</param>
        </member>
        <member name="F:FreneticGameCore.BasicEngine`2.CurrentEID">
            <summary>
            The current highest EID value.
            </summary>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.GetAllByType``1">
            <summary>
            Gets all entities with a specific property.
            </summary>
            <typeparam name="TP">The property type.</typeparam>
            <returns>All entities that match.</returns>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.GetAnyByType``1">
            <summary>
            Gets any one entity with a specific property.
            <para>This does not care for any order if multiple entities contain the property.</para>
            <para>This works best when only one entity will ever have a certain property in an engine.
            For example, the main player, or a game controller.</para>
            <para>Returns null if none found.</para>
            </summary>
            <typeparam name="TP">The property type.</typeparam>
            <returns>One entity, or null.</returns>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.CreateEntity(System.Boolean)">
            <summary>
            Creates an entity.
            </summary>
            <param name="ticks">Whether it should tick.</param>
            <returns>The entity.</returns>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.SpawnEntity(System.Boolean,System.Action{`0},FreneticGameCore.Property[])">
            <summary>
            Spawns an entity into the world.
            </summary>
            <param name="ticks">Whether it should tick.</param>
            <param name="configure">A method to configure the entity prior to spawn, if one applies.</param>
            <param name="props">Any properties to apply.</param>
            <returns>The spawned entity.</returns>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.SpawnEntity(System.Boolean,FreneticGameCore.Property[])">
            <summary>
            Spawns an entity into the world.
            </summary>
            <param name="ticks">Whether it should tick.</param>
            <param name="props">Any properties to apply.</param>
            <returns>The spawned entity.</returns>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.SpawnEntity(System.Action{`0},FreneticGameCore.Property[])">
            <summary>
            Spawns an entity into the world.
            </summary>
            <param name="configure">A method to configure the entity prior to spawn, if one applies.</param>
            <param name="props">Any properties to apply.</param>
            <returns>The spawned entity.</returns>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.SpawnEntity(FreneticGameCore.Property[])">
            <summary>
            Spawns an entity into the world.
            </summary>
            <param name="props">Any properties to apply.</param>
            <returns>The spawned entity.</returns>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.DespawnEntity(`0)">
            <summary>
            Removes an entity from the world.
            </summary>
            <param name="ent">The entity to remove.</param>
        </member>
        <member name="M:FreneticGameCore.BasicEngine`2.Tick">
            <summary>
            The internal engine tick sequence.
            </summary>
        </member>
        <member name="T:FreneticGameCore.Collision.CollisionResult">
            <summary>
            Represents the results of a collision trace.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionResult.Hit">
            <summary>
            Whether it hit anything.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionResult.Normal">
            <summary>
            The impact normal. Warning: not normalized!
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionResult.Position">
            <summary>
            The end location.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionResult.HitEnt">
            <summary>
            The hit entity, if any.
            </summary>
        </member>
        <member name="T:FreneticGameCore.Collision.CollisionUtil">
            <summary>
            Helper code for tracing collision.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionUtil.World">
            <summary>
            The space associated with this utility.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionUtil.NonSolid">
            <summary>
            The non-solid group.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionUtil.Solid">
            <summary>
            The solid group.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionUtil.Player">
            <summary>
            The player group.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionUtil.Item">
            <summary>
            The item group.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionUtil.Water">
            <summary>
            The water group.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionUtil.WorldSolid">
            <summary>
            The world-solid group.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.CollisionUtil.Character">
            <summary>
            The character group.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.ShouldCollide(BEPUphysics.BroadPhaseEntries.BroadPhaseEntry)">
            <summary>
            Checks if an entry should collide at all ever.
            </summary>
            <param name="entry">The entry.</param>
            <returns>Whether it should collide.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.#ctor(BEPUphysics.Space)">
            <summary>
            Constructs the utility.
            </summary>
            <param name="world">The physics world.</param>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.CuboidLineTrace(FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean})">
            <summary>
            Performs a cuboid line trace.
            </summary>
            <param name="halfsize">Half the size of the box.</param>
            <param name="start">The start location.</param>
            <param name="end">The end location.</param>
            <param name="filter">The collision filter, if any.</param>
            <returns>Results.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.CuboidLineTrace(BEPUphysics.CollisionShapes.ConvexShapes.ConvexShape,FreneticGameCore.Location,FreneticGameCore.Location,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean})">
            <summary>
            Returns information on what a cuboid-shaped line trace would collide with, if anything.
            </summary>
            <param name="shape">The shape to trace with.</param>
            <param name="start">The start of the line.</param>
            <param name="end">The end of the line.</param>
            <param name="filter">The collision filter, input a BEPU BroadPhaseEntry and output whether collision should be allowed.</param>
            <returns>The collision details.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.RayTrace(FreneticGameCore.Location,FreneticGameCore.Location,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean})">
            <summary>
            Returns information on what a line trace would collide with, if anything.
            </summary>
            <param name="start">The start of the line.</param>
            <param name="end">The end of the line.</param>
            <param name="filter">The collision filter, input a BEPU BroadPhaseEntry and output whether collision should be allowed.</param>
            <returns>The collision details.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.BoxContainsBox(FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Returns whether a box contains (intersects with) another box.
            </summary>
            <param name="elow">The low point for box 1.</param>
            <param name="ehigh">The high point for box 1.</param>
            <param name="Low">The low point for box 2.</param>
            <param name="High">The high point for box 2.</param>
            <returns>whether there is intersection.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.BoxContainsPoint(FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Returns whether a box contains a point.
            </summary>
            <param name="elow">The low point for the box.</param>
            <param name="ehigh">The high point for the box.</param>
            <param name="point">The point to check.</param>
            <returns>whether there is intersection.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.AABBClosestBox(FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location@)">
            <summary>
            Runs a collision check between two AABB objects.
            </summary>
            <param name="Position">The block's position.</param>
            <param name="Mins">The block's mins.</param>
            <param name="Maxs">The block's maxs.</param>
            <param name="Mins2">The moving object's mins.</param>
            <param name="Maxs2">The moving object's maxs.</param>
            <param name="start">The starting location of the moving object.</param>
            <param name="end">The ending location of the moving object.</param>
            <param name="normal">The normal of the hit, or NaN if none.</param>
            <returns>The location of the hit, or NaN if none.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.RayTraceBox(FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location@)">
            <summary>
            Runs a collision check between an AABB and a ray.
            </summary>
            <param name="Position">The block's position.</param>
            <param name="Mins">The block's mins.</param>
            <param name="Maxs">The block's maxs.</param>
            <param name="start">The starting location of the ray.</param>
            <param name="end">The ending location of the ray.</param>
            <param name="normal">The normal of the hit, or NaN if none.</param>
            <returns>The location of the hit, or NaN if none.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.GetLow(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Gets the lowest point of two points.
            </summary>
            <param name="one">The first point.</param>
            <param name="two">The second point.</param>
            <returns>The lowest point.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.CollisionUtil.GetHigh(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Gets the highest point of two points.
            </summary>
            <param name="one">The first point.</param>
            <param name="two">The second point.</param>
            <returns>The highest point.</returns>
        </member>
        <member name="T:FreneticGameCore.Collision.Vector2i">
            <summary>
            Represents a 2D vector of integers.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the vec2i.
            </summary>
            <param name="x">X coordinaate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="F:FreneticGameCore.Collision.Vector2i.Zero">
            <summary>
            The zero vector.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.Vector2i.X">
            <summary>
            The x coordinate.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.Vector2i.Y">
            <summary>
            The y coordinate.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.GetHashCode">
            <summary>
            Gets a cheap hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.Equals(System.Object)">
            <summary>
            Compares equality between this and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.Equals(FreneticGameCore.Collision.Vector2i)">
            <summary>
            Compares equality between this and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.ToVector2">
            <summary>
            Converts this vector a BEPU floating point vector.
            </summary>
            <returns>The float vector.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.ToLocation">
            <summary>
            Converts this vector a floating point Location.
            Zero on Z axis.
            </summary>
            <returns>The Location.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.ToString">
            <summary>
            Gets a simple string of the vector.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.op_Inequality(FreneticGameCore.Collision.Vector2i,FreneticGameCore.Collision.Vector2i)">
            <summary>
            Logical comparison.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Second vec.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.op_Equality(FreneticGameCore.Collision.Vector2i,FreneticGameCore.Collision.Vector2i)">
            <summary>
            Logical comparison.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Second vec.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.op_Addition(FreneticGameCore.Collision.Vector2i,FreneticGameCore.Collision.Vector2i)">
            <summary>
            Mathematical comparison.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Second vec.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.op_Multiply(FreneticGameCore.Collision.Vector2i,System.Int32)">
            <summary>
            Mathematical comparison.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Int scalar.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector2i.op_Division(FreneticGameCore.Collision.Vector2i,System.Int32)">
            <summary>
            Mathematical comparison.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Int scalar.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:FreneticGameCore.Collision.Vector3i">
            <summary>
            Represents a 3D vector of integers.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct the vec3i.
            </summary>
            <param name="x">X coordinaate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="F:FreneticGameCore.Collision.Vector3i.Zero">
            <summary>
            The zero vector.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.Vector3i.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.Vector3i.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.Vector3i.Z">
            <summary>
            The Z coordinate.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.GetHashCode">
            <summary>
            Gets a cheap hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.Equals(System.Object)">
            <summary>
            Compares equality between this and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.Equals(FreneticGameCore.Collision.Vector3i)">
            <summary>
            Compares equality between this and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.ToVector3">
            <summary>
            Converts this vector a BEPU floating point vector.
            </summary>
            <returns>The float vector.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.ToLocation">
            <summary>
            Converts this vector a floating point Location.
            </summary>
            <returns>The Location.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.ToString">
            <summary>
            Gets a simple string of the vector.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.op_Inequality(FreneticGameCore.Collision.Vector3i,FreneticGameCore.Collision.Vector3i)">
            <summary>
            Logical comparison.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Second vec.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.op_Equality(FreneticGameCore.Collision.Vector3i,FreneticGameCore.Collision.Vector3i)">
            <summary>
            Logical comparison.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Second vec.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.op_Addition(FreneticGameCore.Collision.Vector3i,FreneticGameCore.Collision.Vector3i)">
            <summary>
            Mathematical operation.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Second vec.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.op_Subtraction(FreneticGameCore.Collision.Vector3i,FreneticGameCore.Collision.Vector3i)">
            <summary>
            Mathematical operation.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Second vec.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.Vector3i.op_Multiply(FreneticGameCore.Collision.Vector3i,System.Int32)">
            <summary>
            Mathematical operation.
            </summary>
            <param name="one">First vec.</param>
            <param name="two">Int scalar.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:FreneticGameCore.Collision.AABB">
            <summary>
            Represents an Axis-Aligned Bounding Box.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.AABB.Min">
            <summary>
            The minimum coordinates.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Collision.AABB.Max">
            <summary>
            The maximum coordinates.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Collision.AABB.Intersects(FreneticGameCore.Collision.AABB)">
            <summary>
            Returns whether the box intersects another box.
            </summary>
            <param name="box2">The second box.</param>
            <returns>Whether they intersect.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.AABB.ToString">
            <summary>
            Converts the AABB to a string.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:FreneticGameCore.Collision.AABB.Include(FreneticGameCore.Location)">
            <summary>
            Includes a Location into the box's space, expanding as needed (but not shrinking).
            </summary>
            <param name="pos">The position to include.</param>
        </member>
        <member name="T:FreneticGameCore.Color3F">
            <summary>
            Represents a 3-piece floating point color.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Color3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs the color 3F.
            </summary>
            <param name="_r">Red.</param>
            <param name="_g">Green.</param>
            <param name="_b">Blue.</param>
        </member>
        <member name="F:FreneticGameCore.Color3F.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color3F.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color3F.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Color3F.IR">
            <summary>
            Integer R.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Color3F.IG">
            <summary>
            Integer G.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Color3F.IB">
            <summary>
            Integer B.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Color3F.op_Multiply(FreneticGameCore.Color3F,System.Single)">
            <summary>
            Multiplies a color by a scale.
            </summary>
            <param name="v">The color.</param>
            <param name="scale">The scale.</param>
            <returns>Result.</returns>
        </member>
        <member name="F:FreneticGameCore.Color3F.White">
            <summary>
            Sample Color3F (1, 1, 1).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color3F.Black">
            <summary>
            Sample Color3F (0, 0, 0).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color3F.Red">
            <summary>
            Sample Color3F (1, 0, 0).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color3F.Green">
            <summary>
            Sample Color3F (0, 1, 0).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color3F.Blue">
            <summary>
            Sample Color3F (0, 0, 1).
            </summary>
        </member>
        <member name="T:FreneticGameCore.Color4F">
            <summary>
            Represents a 4-piece floating point color.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Color4F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs the color 4F with full alpha.
            </summary>
            <param name="_r">Red.</param>
            <param name="_g">Green.</param>
            <param name="_b">Blue.</param>
        </member>
        <member name="M:FreneticGameCore.Color4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs the color 4F with specific alpha.
            </summary>
            <param name="_r">Red.</param>
            <param name="_g">Green.</param>
            <param name="_b">Blue.</param>
            <param name="_a">Alpha.</param>
        </member>
        <member name="M:FreneticGameCore.Color4F.#ctor(FreneticGameCore.Color3F)">
            <summary>
            Constructs the color 4F with full alpha.
            </summary>
            <param name="color">The 3-piece color.</param>
        </member>
        <member name="M:FreneticGameCore.Color4F.#ctor(FreneticGameCore.Color3F,System.Single)">
            <summary>
            Constructs the color 4F with specific alpha.
            </summary>
            <param name="color">The 3-piece color.</param>
            <param name="_a">Alpha.</param>
        </member>
        <member name="F:FreneticGameCore.Color4F.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color4F.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color4F.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color4F.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Color4F.IR">
            <summary>
            Integer R.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Color4F.IG">
            <summary>
            Integer G.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Color4F.IB">
            <summary>
            Integer B.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Color4F.IA">
            <summary>
            Integer A.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Color4F.RGB">
            <summary>
            Gets or sets the RGB color object for this color.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color4F.BYTE_TO_FLOAT">
            <summary>
            A float of 1/255.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Color4F.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a Color4F from 4 bytes.
            Built for quick conversion of byte-based color types, EG System.Drawing.Color!
            </summary>
            <param name="r">Red.</param>
            <param name="g">Green.</param>
            <param name="b">Blue.</param>
            <param name="a">Alpha.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:FreneticGameCore.Color4F.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a Color4F from 3 bytes.
            Built for quick conversion of byte-based color types, EG System.Drawing.Color!
            </summary>
            <param name="r">Red.</param>
            <param name="g">Green.</param>
            <param name="b">Blue.</param>
            <returns>The color.</returns>
        </member>
        <member name="F:FreneticGameCore.Color4F.White">
            <summary>
            Sample Color4F (1, 1, 1).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color4F.Black">
            <summary>
            Sample Color4F (0, 0, 0).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color4F.Red">
            <summary>
            Sample Color4F (1, 0, 0).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color4F.Green">
            <summary>
            Sample Color4F (0, 1, 0).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Color4F.Blue">
            <summary>
            Sample Color4F (0, 0, 1).
            </summary>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.BasicEntity`1">
            <summary>
            The base most class of an entity in the FreneticGameEngine.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.Engine">
            <summary>
            The owning engine.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.Ticks">
            <summary>
            Whether the entity should tick normally.
            <para>Note: Setting this after it's spawned is not required to validly modify its value.</para>
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.EID">
            <summary>
            The internal Entity ID (Identifier) number for this entity.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.IsSpawned">
            <summary>
            Whether the entity is spawned into the world.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.Removed">
            <summary>
            The entity is removed from the owning world, or will be momentarily.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.OnTick">
            <summary>
            Fired when the entity is being ticked.
            TODO: Actual event?
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.LastKnownPosition">
            <summary>
            Last position known that this entity was or is exactly upon.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.OnPositionChanged">
            <summary>
            Fired when the entity is moved.
            TODO: Actual event?
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.OnOrientationChanged">
            <summary>
            Fired when the entity's orientation is changed.
            TODO: Actual event?
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.OnSpawnEvent">
            <summary>
            Fired when this entity is spawned into a world.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.BasicEntity`1.OnDespawnEvent">
            <summary>
            Fired when this entity is despawned out of a world.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.BasicEntity`1.SetPosition(FreneticGameCore.Location)">
            <summary>
            Sets the position of the entity.
            </summary>
            <param name="p">New position.</param>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.BasicEntity`1.SetLKP(FreneticGameCore.Location)">
            <summary>
            Sets the last known position to the input value.
            </summary>
            <param name="p">The last known position.</param>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.BasicEntity`1.#ctor(`0,System.Boolean)">
            <summary>
            Construct the basic Entity.
            </summary>
            <param name="eng">The owning engine.</param>
            <param name="_ticks">Whether the entity ticks.</param>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.BasicEntity`1.TickThis">
            <summary>
            Tick the entity. Just fires the tick event!
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.BasicEntity`1.ToString">
            <summary>
            Gets a string debug helper for this entity.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.BasicEntity`1.PropertyList">
            <summary>
            Gets a string list of all properties.
            </summary>
            <returns>The string list.</returns>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.EntitySpawnEventArgs">
            <summary>
            Represents the arguments to an entity spawn event.
            </summary>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.EntityDespawnEventArgs">
            <summary>
            Represents the arguments to an entity de-spawn event.
            </summary>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.BasicEntityProperty`2">
            <summary>
            Represents a property on a basic entity.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.BasicEntityProperty`2.OnSpawn">
            <summary>
            Run when the entity is spawned.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.BasicEntityProperty`2.OnDespawn">
            <summary>
            Run when the entity is de-spawned.
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.BasicEntityProperty`2.Entity">
            <summary>
            Gets the entity associated with a property.
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.BasicEntityProperty`2.Engine">
            <summary>
            Gets the engine associated with a property.
            </summary>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.EntityPhysics2DLimitProperty`3">
            <summary>
            Restricts a physics entity to 2D only.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysics2DLimitProperty`3.ForcePosition">
            <summary>
            Whether to force the position (in addition to rotation).
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysics2DLimitProperty`3.OnSpawn">
            <summary>
            Handles the spawn event.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysics2DLimitProperty`3.SpawnHandle(FreneticGameCore.FreneticEventArgs{FreneticGameCore.EntitySystem.EntitySpawnEventArgs})">
            <summary>
            Post-spawn handling.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysics2DLimitProperty`3.TickHandle">
            <summary>
            Handles the tick event.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysics2DLimitProperty`3.RemoveJoints">
            <summary>
            Removes the joints from the physics world.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysics2DLimitProperty`3.OnDespawn">
            <summary>
            Handles the despawn event.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysics2DLimitProperty`3.OnRemoved">
            <summary>
            Handles removal event.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysics2DLimitProperty`3.PhysEnt">
            <summary>
            The relevant physics entity.
            </summary>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityConvexHullShape">
            <summary>
            A convex hull shape for an entity.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityConvexHullShape.Internal">
            <summary>
            The internal convex hull shape.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityConvexHullShape.Center">
            <summary>
            The center offset for this shape.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityConvexHullShape.GetCenterOffset">
            <summary>
            Gets the center offset.
            </summary>
            <returns>The center offset.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityConvexHullShape.GetBEPUShape">
            <summary>
            Gets the BEPU shape object.
            </summary>
            <returns>The BEPU shape.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityConvexHullShape.ToString">
            <summary>
            The string form of this shape helper.
            </summary>
            <returns>String form.</returns>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.PhysicsHelpers.EntitySphereShape">
            <summary>
            A sp[here shape for an entity.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.PhysicsHelpers.EntitySphereShape.Size">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntitySphereShape.GetBEPUShape">
            <summary>
            Gets the BEPU shape object.
            </summary>
            <returns>The BEPU shape.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntitySphereShape.ToString">
            <summary>
            The string form of this shape helper.
            </summary>
            <returns>String form.</returns>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityBoxShape">
            <summary>
            A box shape for an entity.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityBoxShape.Size">
            <summary>
            The size of the box on each axis.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityBoxShape.GetBEPUShape">
            <summary>
            Gets the BEPU shape object.
            </summary>
            <returns>The BEPU shape.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityBoxShape.ToString">
            <summary>
            The string form of this shape helper.
            </summary>
            <returns>String form.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityBoxShape.ToBytes">
            <summary>
            Converts the box shape to a byte array.
            </summary>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityBoxShape.FromBytes(System.Byte[])">
            <summary>
            Converts the byte array to box shape.
            </summary>
            <param name="b">The bytes.</param>
            <returns>The box.</returns>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityCharacterShape">
            <summary>
            Represents a physical 'character'.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityCharacterShape.Up">
            <summary>
            Upward axis.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityCharacterShape.Radius">
            <summary>
            Half-width of the character.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityCharacterShape.Height">
            <summary>
            Height of the character.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityCharacterShape.Speed">
            <summary>
            Standing speed of the character.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityCharacterShape.JumpSpeed">
            <summary>
            Jumping speed of the character.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityCharacterShape.GetBEPUCharacter">
            <summary>
            Returns the BEPU version of the character.
            </summary>
            <returns>The BEPU character.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityCharacterShape.GetBEPUShape">
            <summary>
            Returns null as a special case to the internal shape options.
            </summary>
            <returns>Null.</returns>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityShapeHelper">
            <summary>
            Implementations of this class are helpers for the various possible entity physics shapes.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityShapeHelper.GetBEPUShape">
            <summary>
            Gets the BEPU shape object.
            </summary>
            <returns>The BEPU shape.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityShapeHelper.GetCenterOffset">
            <summary>
            Gets the BEPU Shape offset, if any.
            </summary>
            <returns>The shape offset, or Zero if none.</returns>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.PhysicsHelpers.EntityShapeHelper.ToString">
            <summary>
            The string form of this shape helper.
            </summary>
            <returns>String form.</returns>
        </member>
        <member name="T:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2">
            <summary>
            Identifies and controls the factors of an entity relating to standard-implemented physics.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.PhysicsWorld">
            <summary>
            The owning physics world.
            </summary> // TODO: Save the correct physics world ref?
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.SpawnedBody">
            <summary>
            The spawned physics body.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.OriginalObject">
            <summary>
            The original spawned object.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.Shape">
            <summary>
            The shape of the physics body.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.InternalMass">
            <summary>
            The starting mass of the physics body.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.GravityIsSet">
            <summary>
            Whether gravity value is already set for this entity. If not set, <see cref="P:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.Gravity"/> is invalid or irrelevant.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.InternalGravity">
            <summary>
            The starting gravity of the physics body.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.InternalFriction">
            <summary>
            The starting friction value of the physics body.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.InternalBounciness">
            <summary>
            The starting bounciness (restitution coefficient) of the physics body.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.InternalLinearVelocity">
            <summary>
            The starting linear velocity of the physics body.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.InternalAngularVelocity">
            <summary>
            The starting angular velocity of the physics body.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.InternalPosition">
            <summary>
            The starting position of the physics body.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.InternalOrientation">
            <summary>
            The starting orientation of the physics body.
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.Mass">
            <summary>
            Gets or sets the entity's mass.
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.Gravity">
            <summary>
            Gets or sets the entity's gravity.
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.Friction">
            <summary>
            Gets or sets the entity's friction.
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.Bounciness">
            <summary>
            Gets or sets the entity's bounciness (Restitution coefficient).
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.LinearVelocity">
            <summary>
            Gets or sets the entity's linear velocity.
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.AngularVelocity">
            <summary>
            Gets or sets the entity's angular velocity.
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.Position">
            <summary>
            Gets or sets the entity's position.
            </summary>
        </member>
        <member name="P:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.Orientation">
            <summary>
            Gets or sets the entity's orientation.
            TODO: Custom FGE quaternion type?
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.#ctor">
            <summary>
            Construct the physics entity property.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.OnSpawn">
            <summary>
            Fired when the entity is added to the world.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.OnDespawn">
            <summary>
            Fired when the entity is removed from the world.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.PosCheck(FreneticGameCore.Location)">
            <summary>
            Checks and handles a position update.
            </summary>
            <param name="p">The new position.</param>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.OriCheck(BEPUutilities.Quaternion)">
            <summary>
            Checks and handles an orientation update.
            </summary>
            <param name="q">The new orientation.</param>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.SpawnHandle">
            <summary>
            Handles the physics entity being spawned into a world.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.Tick">
            <summary>
            Ticks the physics entity.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.TickUpdates">
            <summary>
            Ticks external positioning updates.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.UpdateFields">
            <summary>
            Updates the entity's local fields from spawned variant.
            </summary>
        </member>
        <member name="F:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.DespawnEvent">
            <summary>
            Fired before the physics entity is despawned from the world.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.DespawnHandle">
            <summary>
            Handles the physics entity being de-spawned from a world.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.OnRemoved">
            <summary>
            Handles removal event.
            </summary>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.ApplyForce(FreneticGameCore.Location)">
            <summary>
            Applies a force directly to the physics entity's body.
            The force is assumed to be perfectly central to the entity.
            Note: this is a force, not a velocity. Mass is relevant.
            This will activate the entity.
            </summary>
            <param name="force">The force to apply.</param>
        </member>
        <member name="M:FreneticGameCore.EntitySystem.EntityPhysicsProperty`2.ApplyForce(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Applies a force directly to the physics entity's body, at a specified relative origin point.
            The origin is relevant to the body's centerpoint.
            The further you get from the centerpoint, the more spin and less linear motion will be applied.
            Note: this is a force, not a velocity. Mass is relevant.
            This will activate the entity.
            </summary>
            <param name="origin">Where to apply the force at.</param>
            <param name="force">The force to apply.</param>
        </member>
        <member name="T:FreneticGameCore.FreneticEvent`1">
            <summary>
            Represents an event within the Frenetic Game Engine.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEvent`1.Handlers">
            <summary>
            All event handlers for this event.
            </summary>
        </member>
        <member name="M:FreneticGameCore.FreneticEvent`1.Fire(FreneticGameCore.Scheduler,`0)">
            <summary>
            Fire the event with the given arguments.
            </summary>
            <param name="schedule">The scheduler of relevance.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:FreneticGameCore.FreneticEvent`1.RemoveBySource(System.Object)">
            <summary>
            Removes all event handlers from a given source.
            </summary>
            <param name="sourceTracker">The source.</param>
        </member>
        <member name="M:FreneticGameCore.FreneticEvent`1.AddEvent(System.Action{FreneticGameCore.FreneticEventArgs{`0}},System.Object,System.Double)">
            <summary>
            Add a non-waitable event handler to this event.
            </summary>
            <param name="act">The handler.</param>
            <param name="sourceTracker">The object sourcing this event (EG a plugin object).</param>
            <param name="priority">The priority of the event.</param>
            <returns></returns>
        </member>
        <member name="M:FreneticGameCore.FreneticEvent`1.AddEvent(System.Action{FreneticGameCore.FreneticEventArgs{`0},FreneticGameCore.FreneticEventWaiter},System.Object,System.Double)">
            <summary>
            Add a waitable event handler to this event.
            </summary>
            <param name="act">The handler.</param>
            <param name="sourceTracker">The object sourcing this event (EG a plugin object).</param>
            <param name="priority">The priority of the event.</param>
            <returns></returns>
        </member>
        <member name="M:FreneticGameCore.FreneticEvent`1.ReSort">
            <summary>
            Re-sorts the internal handler list.
            </summary>
        </member>
        <member name="T:FreneticGameCore.ICancellableEvent">
            <summary>
            Represents a cancellable event.
            </summary>
        </member>
        <member name="P:FreneticGameCore.ICancellableEvent.Cancelled">
            <summary>
            Gets or sets whether the event is cancelled.
            </summary>
        </member>
        <member name="T:FreneticGameCore.FreneticEventArgs`1">
            <summary>
            Represents the arguments to an event.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventArgs`1.PriorityPosition">
            <summary>
            The priority value of this firing. Not valid after a wait instruction.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventArgs`1.ScheduleHelper">
            <summary>
            Helper to schedule things within this context.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventArgs`1.Context">
            <summary>
            The contextual arguments to this event.
            </summary>
        </member>
        <member name="T:FreneticGameCore.FreneticEventWaiter">
            <summary>
            Helper to wait inside events.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventWaiter.Schedule">
            <summary>
            The scheduler for this waiter.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventWaiter.Used">
            <summary>
            Whether this waiter has been used to create a wait.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventWaiter.MRECompletion">
            <summary>
            The marker for completetion of the waiter.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventWaiter.MREFirst">
            <summary>
            Locked until the first pass of the wait run is complete.
            </summary>
        </member>
        <member name="M:FreneticGameCore.FreneticEventWaiter.Wait(System.Double)">
            <summary>
            Waits for a delay in seconds.
            </summary>
            <param name="delay">The delay, in seconds.</param>
        </member>
        <member name="M:FreneticGameCore.FreneticEventWaiter.WaitFor(System.Threading.ManualResetEvent)">
            <summary>
            Waits for an MRE to be set - the runs at the next frame tick.
            Waits minimum one frame.
            </summary>
            <param name="mre"></param>
        </member>
        <member name="F:FreneticGameCore.FreneticEventWaiter.AutoComplete">
            <summary>
            Whether to automatically complete this waiter at the end of the event system.
            If turned to false, must call <see cref="M:FreneticGameCore.FreneticEventWaiter.Complete"/> to end the waiter when the event is done.
            </summary>
        </member>
        <member name="M:FreneticGameCore.FreneticEventWaiter.Complete">
            <summary>
            Marks the Waiter complete. MUST be run if waiting is ever used! Called automatically by the event system.
            </summary>
        </member>
        <member name="M:FreneticGameCore.FreneticEventWaiter.Dispose(System.Boolean)">
            <summary>
            Screw microsoft.
            </summary>
            <param name="disposing">If you input false, screw you.</param>
        </member>
        <member name="M:FreneticGameCore.FreneticEventWaiter.Dispose">
            <summary>
            Dispose and destroy the event.
            </summary>
        </member>
        <member name="T:FreneticGameCore.FreneticEventFirer`1">
            <summary>
            Helper to fire an event.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventFirer`1.Fire">
            <summary>
            Used to fire the event.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventFirer`1.Priority">
            <summary>
            The priority of this firer.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventFirer`1.SourceTracker">
            <summary>
            The object to track this firer's sourcing.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventFirer`1.FireAction">
            <summary>
            The action used to fire the FreneticEventArgs.
            </summary>
        </member>
        <member name="F:FreneticGameCore.FreneticEventFirer`1.FireWaiter">
            <summary>
            The action used to fire the FreneticEventArgs with a waiter.
            </summary>
        </member>
        <member name="M:FreneticGameCore.FreneticEventFirer`1.#ctor(System.Action{FreneticGameCore.FreneticEventArgs{`0}})">
            <summary>
            Constructs the firer without a waitable option.
            </summary>
            <param name="noWaitEvent">The standard event.</param>
        </member>
        <member name="M:FreneticGameCore.FreneticEventFirer`1.#ctor(System.Action{FreneticGameCore.FreneticEventArgs{`0},FreneticGameCore.FreneticEventWaiter})">
            <summary>
            Constructs the firer with a waitable option.
            </summary>
            <param name="waitedEvent">The waiter.</param>
        </member>
        <member name="M:FreneticGameCore.FreneticEventFirer`1.FireNoWait(FreneticGameCore.FreneticEventArgs{`0})">
            <summary>
            Fires the event, not returning a waiter.
            </summary>
            <param name="fea">The arguments to the event.</param>
            <returns>No waiter.</returns>
        </member>
        <member name="M:FreneticGameCore.FreneticEventFirer`1.FireWait(FreneticGameCore.FreneticEventArgs{`0})">
            <summary>
            Fires the event, potentially returning a waiter.
            </summary>
            <param name="fea">The arguments to the event.</param>
            <returns>A waiter if needed.</returns>
        </member>
        <member name="T:FreneticGameCore.Frustum">
            <summary>
            Represents a 3D Frustum.
            Can be used to represent the area a camera can see.
            Can be used for high-speed culling of visible objects.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Frustum.Near">
            <summary>
            Near plane.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Frustum.Far">
            <summary>
            Far plane.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Frustum.Left">
            <summary>
            Left plane.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Frustum.Right">
            <summary>
            Right plane.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Frustum.Top">
            <summary>
            Top plane.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Frustum.Bottom">
            <summary>
            Bottom plane.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Frustum.#ctor(BEPUutilities.Matrix)">
            <summary>
            Constructs the Frustum from a Matrix.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:FreneticGameCore.Frustum.ContainsBox(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Returns whether an AABB is contained by the Frustum.
            </summary>
            <param name="min">The lower coord of the AABB.</param>
            <param name="max">The higher coord of the AABB.</param>
            <returns>Whether it is contained.</returns>
        </member>
        <member name="M:FreneticGameCore.Frustum.ContainsSphere(FreneticGameCore.Location,System.Double)">
            <summary>
            Returns whether the frustum contains a sphere.
            </summary>
            <param name="point">The center of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <returns>Whether it intersects.</returns>
        </member>
        <member name="M:FreneticGameCore.Frustum.GetFor(System.Int32)">
            <summary>
            Gets the plane associated with an index.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Frustum.Contains(FreneticGameCore.Location)">
            <summary>
            Returns whether the Frustum contains a point.
            </summary>
            <param name="point">The point.</param>
            <returns>Whether it's contained.</returns>
        </member>
        <member name="T:FreneticGameCore.LanguageEngine">
            <summary>
            Handles internationalization of text (translation to other languages).
            <para>Text IDs are specified as arrays in the form: FileID, Key, Variables</para>
            <para>Key is an FDS key using dots '.' to represent a subkey separator.</para>
            </summary>
        </member>
        <member name="F:FreneticGameCore.LanguageEngine.AUTO_DEFAULT">
            <summary>
            Used for <see cref="F:FreneticGameCore.LanguageEngine.DefaultLanguage"/> and <see cref="F:FreneticGameCore.LanguageEngine.CurrentLanguage"/>.
            </summary>
        </member>
        <member name="F:FreneticGameCore.LanguageEngine.DefaultLanguage">
            <summary>
            The default language.
            If unset, will be 'en_us' (English).
            <para>This is chosen as the default as most developers speak English, and it is commonly considered a default global language.</para>
            <para>It is not required to be kept at English, though any developer using FGE probably understands English (based off the fact that all main docs and code names are English).</para>
            </summary>
        </member>
        <member name="F:FreneticGameCore.LanguageEngine.EnglishDocuments">
            <summary>
            The default documents in English (or, in whatever language <see cref="F:FreneticGameCore.LanguageEngine.DefaultLanguage"/> is set to).
            Considered the root-most document, should be the best-written document samples most likely to be updated by developers.
            </summary>
        </member>
        <member name="F:FreneticGameCore.LanguageEngine.LanguageDocuments">
            <summary>
            All documents in the currently set language.
            </summary>
        </member>
        <member name="F:FreneticGameCore.LanguageEngine.CurrentLanguage">
            <summary>
            The currently set language.
            </summary>
        </member>
        <member name="M:FreneticGameCore.LanguageEngine.SetLanguage(System.String)">
            <summary>
            Sets the language to use. If the language specified is unavailable, text will fall back to <see cref="F:FreneticGameCore.LanguageEngine.DefaultLanguage"/>.
            Should be in Language ID code, eg "en_us", but must match file names more than anything.
            </summary>
            <param name="language">The language to use.</param>
        </member>
        <member name="M:FreneticGameCore.LanguageEngine.GetLangDoc(System.String,FreneticGameCore.Files.FileHandler,System.String,System.Collections.Generic.Dictionary{System.String,FreneticDataSyntax.FDSSection})">
            <summary>
            Gets a language document for the specified parameters.
            </summary>
            <param name="id">The document ID.</param>
            <param name="Files">The file system.</param>
            <param name="lang">The language to enforce for this read, if any.</param>
            <param name="confs">The custom configuration set to use, if any.</param>
            <returns></returns>
        </member>
        <member name="F:FreneticGameCore.LanguageEngine.BADKEY">
            <summary>
            The key that represents a missing key.
            </summary>
        </member>
        <member name="M:FreneticGameCore.LanguageEngine.Handle(System.String,System.String[])">
            <summary>
            Helper to handle vars.
            Translates variables of form "{{1}}" to the var set by the requester.
            </summary>
            <param name="info">The text item.</param>
            <param name="pathAndVars">The path and its vars.</param>
            <returns>The var-cleaned string.</returns>
        </member>
        <member name="M:FreneticGameCore.LanguageEngine.HandleList(System.Collections.Generic.List{System.String},System.String[])">
            <summary>
            Handles a list of texts against a var, similar to <see cref="M:FreneticGameCore.LanguageEngine.Handle(System.String,System.String[])"/>.
            </summary>
            <param name="infolist">The list of infos.</param>
            <param name="pathAndVars">The path and its vars.</param>
            <returns>Handled lists.</returns>
        </member>
        <member name="M:FreneticGameCore.LanguageEngine.GetTextList(FreneticGameCore.Files.FileHandler,System.String[])">
            <summary>
            Gets a list of texts.
            </summary>
            <param name="Files">The file system.</param>
            <param name="pathAndVars">The path and its vars.</param>
            <returns>The text list.</returns>
        </member>
        <member name="M:FreneticGameCore.LanguageEngine.GetText(FreneticGameCore.Files.FileHandler,System.String[])">
            <summary>
            Gets a text.
            </summary>
            <param name="Files">The file system.</param>
            <param name="pathAndVars">The path and its vars.</param>
            <returns>The text.</returns>
        </member>
        <member name="T:FreneticGameCore.Model3D">
            <summary>
            Represents an abstract 3D model.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3D.Meshes">
            <summary>
            The meshes that compose this model.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3D.RootNode">
            <summary>
            The root bone node of the model.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3D.MatrixA">
            <summary>
            The default matrix of the model.
            </summary>
        </member>
        <member name="T:FreneticGameCore.Model3DMesh">
            <summary>
            Represents a single mesh of an abstract 3D model.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DMesh.Vertices">
            <summary>
            The vertices on this mesh.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DMesh.Indices">
            <summary>
            The indices on this mesh.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DMesh.Normals">
            <summary>
            The normal vectors on this mesh.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DMesh.TexCoords">
            <summary>
            The texture coordinates on this mesh.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DMesh.Bones">
            <summary>
            The bones on this mesh.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DMesh.Name">
            <summary>
            The name of this mesh.
            </summary>
        </member>
        <member name="T:FreneticGameCore.Model3DBone">
            <summary>
            Represents a single bone in an abstract 3D model mesh.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DBone.Name">
            <summary>
            The name of this bone.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DBone.IDs">
            <summary>
            The vertex IDs of this bone.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DBone.Weights">
            <summary>
            The vertex weights on this bone.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DBone.MatrixA">
            <summary>
            The default matrix of this bone.
            </summary>
        </member>
        <member name="T:FreneticGameCore.Model3DNode">
            <summary>
            Represents a single node in an abstract 3D model mesh.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DNode.Name">
            <summary>
            The name of this node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DNode.MatrixA">
            <summary>
            The default matrix of this node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DNode.Parent">
            <summary>
            The parent of this node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Model3DNode.Children">
            <summary>
            All children of this node.
            </summary>
        </member>
        <member name="T:FreneticGameCore.ModelHandler">
            <summary>
            Handles abstract 3D models. Can be purposed for both collision systems and rendering.
            </summary>
        </member>
        <member name="M:FreneticGameCore.ModelHandler.LoadModel(System.Byte[])">
            <summary>
            Loads a model from .FMD (Frenetic Model Data) input.
            </summary>
            <param name="data">The input FMD data.</param>
        </member>
        <member name="M:FreneticGameCore.ModelHandler.ReadSingleNode(FreneticGameCore.Model3DNode,FreneticGameCore.Files.DataReader)">
            <summary>
            Reads a single node from a model.
            </summary>
            <param name="root">The root node.</param>
            <param name="dr">The data reader.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:FreneticGameCore.ModelHandler.ReadMat(FreneticGameCore.Files.DataReader)">
            <summary>
            Reads a matrix.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:FreneticGameCore.ModelHandler.GetVertices(FreneticGameCore.Model3D)">
            <summary>
            Gets all vertices in a model.
            </summary>
            <param name="input">The model.</param>
            <returns>The vertices.</returns>
        </member>
        <member name="M:FreneticGameCore.ModelHandler.GetCollisionVertices(FreneticGameCore.Model3D)">
            <summary>
            Gets all COLLISION ENABLED vertices of a model.
            </summary>
            <param name="input">The model.</param>
            <returns>The collision vertices.</returns>
        </member>
        <member name="M:FreneticGameCore.ModelHandler.MeshToBepu(FreneticGameCore.Model3D,System.Int32@)">
            <summary>
            Converts a mesh to a BEPU perfect mesh.
            </summary>
            <param name="input">The model.</param>
            <param name="verts">The vertice count if needed.</param>
            <returns>The BEPU mesh.</returns>
        </member>
        <member name="M:FreneticGameCore.ModelHandler.MeshToBepuConvex(FreneticGameCore.Model3D,System.Int32@,BEPUutilities.Vector3@)">
            <summary>
            Converts a mesh to a BEPU convex mesh.
            </summary>
            <param name="input">The model.</param>
            <param name="verts">The vertice count if needed.</param>
            <param name="center">The center output.</param>
            <returns>The BEPU mesh.</returns>
        </member>
        <member name="T:FreneticGameCore.PhysicsSpace`2">
            <summary>
            Represents a physical world (space).
            </summary>
        </member>
        <member name="F:FreneticGameCore.PhysicsSpace`2.Internal">
            <summary>
            The actual internal physics space.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PhysicsSpace`2.RelativeScale">
            <summary>
            The scale of all physics vs. rendered objects. Phys * Scale = Render.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PhysicsSpace`2.#ctor">
            <summary>
            Construct the physics space.
            </summary>
        </member>
        <member name="P:FreneticGameCore.PhysicsSpace`2.Gravity">
            <summary>
            Gets or sets the internal default gravity value.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PhysicsSpace`2.SpawnedEntities">
            <summary>
            All current entities in this physics world.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PhysicsSpace`2.Spawn(`0,BEPUphysics.ISpaceObject)">
            <summary>
            Spawns a physical object into the physics world.
            One entity per physics object only!
            </summary>
            <param name="ent">The controlling entity.</param>
            <param name="bepuent">The BEPU object.</param>
        </member>
        <member name="M:FreneticGameCore.PhysicsSpace`2.Despawn(`0,BEPUphysics.ISpaceObject)">
            <summary>
            De-Spawns a physical object from the physics world.
            One entity per physics object only!
            </summary>
            <param name="ent">The controlling entity.</param>
            <param name="bepuent">The BEPU object.</param>
        </member>
        <member name="M:FreneticGameCore.PhysicsSpace`2.GetEntitiesInBox(FreneticGameCore.Collision.AABB)">
            <summary>
            Gets all (physics enabled) entities whose boundaries touch the specified bounding box. This includes entities fully within the box.
            <para>Note that this method is designed for best acceleration with LINQ.</para>
            </summary>
            <param name="box">The bounding box.</param>
            <returns>The list of entities found.</returns>
        </member>
        <member name="M:FreneticGameCore.PhysicsSpace`2.RayTraceSingle(FreneticGameCore.Location,FreneticGameCore.Location,System.Double,System.Func{BEPUphysics.BroadPhaseEntries.BroadPhaseEntry,System.Boolean})">
            <summary>
            Sends a world ray trace, giving back the single found object, or null if none.
            </summary>
            <param name="start">The start position.</param>
            <param name="dir">The direction.</param>
            <param name="dist">The distance.</param>
            <param name="filter">The filter, if any.</param>
        </member>
        <member name="T:FreneticGameCore.Plane">
            <summary>
            Represents a triangle in 3D space.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Plane.Normal">
            <summary>
            The normal of the plane.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Plane.vec1">
            <summary>
            The first corner.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Plane.vec2">
            <summary>
            The second corner.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Plane.vec3">
            <summary>
            The third corner.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Plane.D">
            <summary>
            The distance from the origin.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Plane.#ctor(FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Constructs a plane, calculating a normal.
            </summary>
            <param name="v1">Vertex one.</param>
            <param name="v2">Vertex two.</param>
            <param name="v3">Vertex three.</param>
        </member>
        <member name="M:FreneticGameCore.Plane.#ctor(FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Constructs a plane, with a known normal.
            </summary>
            <param name="v1">Vertex one.</param>
            <param name="v2">Vertex two.</param>
            <param name="v3">Vertex three.</param>
            <param name="_normal">The precalculated normal.</param>
        </member>
        <member name="M:FreneticGameCore.Plane.#ctor(FreneticGameCore.Location,System.Double)">
            <summary>
            Constructs a plane from a normal and its distance from the origin (no vertices calculated).
            </summary>
            <param name="_normal">The normal.</param>
            <param name="_d">The distance.</param>
        </member>
        <member name="M:FreneticGameCore.Plane.IntersectLine(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Finds where a line hits the plane, if anywhere.
            </summary>
            <param name="start">The start of the line.</param>
            <param name="end">The end of the line.</param>
            <returns>A location of the hit, or NaN if none.</returns>
        </member>
        <member name="M:FreneticGameCore.Plane.FlipNormal">
            <summary>
            Flips the normal, returned as a new object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreneticGameCore.Plane.Distance(FreneticGameCore.Location)">
            <summary>
            Returns the distance between a point and the plane.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:FreneticGameCore.Plane.SignToPlane(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Determines the signs of a box to the plane.
            If it returns 1, the box is above the plane.
            If it returns -1, the box is below the plane.
            If it returns 0, the box intersections with the plane.
            </summary>
            <param name="Mins">The mins of the box.</param>
            <param name="Maxs">The maxes of the box.</param>
            <returns>-1, 0, or 1.</returns>
        </member>
        <member name="M:FreneticGameCore.Plane.ToString">
            <summary>
            Converts the plane to a simple string form.
            </summary>
            <returns>The plane string.</returns>
        </member>
        <member name="M:FreneticGameCore.Plane.FromString(System.String)">
            <summary>
            Converts a string to a plane.
            </summary>
            <param name="input">The plane string.</param>
            <returns>A plane.</returns>
        </member>
        <member name="T:FreneticGameCore.Files.DataReader">
            <summary>
            Helper to read data from a stream.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.DataReader.Internal">
            <summary>
            The internal stream.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.#ctor(FreneticGameCore.Files.DataStream)">
            <summary>
            Constructs the data reader.
            </summary>
            <param name="stream">The base stream.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadByte">
            <summary>
            Reads a single byte from the stream.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Files.DataReader.Available">
            <summary>
            Gets the amount of data available.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadBytes(System.Int32)">
            <summary>
            Read a set of bytes.
            </summary>
            <param name="count">The number of bytes.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadSByte">
            <summary>
            Read a signed byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadBool">
            <summary>
            Read a boolean (1 byte).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadLocation">
            <summary>
            Read a location object (24 bytes).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadChar">
            <summary>
            Read a character (2 bytes).
            </summary>
            <returns></returns>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadShort">
            <summary>
            Read a short integer (2 bytes).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadUShort">
            <summary>
            Read an unsigned short integer (2 bytes).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadInt">
            <summary>
            Read an integer (4 bytes).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadUInt">
            <summary>
            Read an unsigned integer (4 bytes).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadLong">
            <summary>
            Read a long integer (8 bytes).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadULong">
            <summary>
            Read an unsigned long integer (8 bytes).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadFloat">
            <summary>
            Read a float (4 bytes).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadDouble">
            <summary>
            Read a double (8 bytes).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadString(System.Int32)">
            <summary>
            Read a string with a specified length.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadFullBytes">
            <summary>
            Read a "full set" of bytes: specified by a 4-byte length at the start of data.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.ReadFullString">
            <summary>
            Read a "full" string: specified by a 4-byte length at the start of data.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataReader.Close">
            <summary>
            Close the underlying stream.
            </summary>
        </member>
        <member name="T:FreneticGameCore.Files.DataStream">
            <summary>
            A simplified in-memory stream object.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.DataStream.Wrapped">
            <summary>
            Wrapped internal stream.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.DataStream.Len">
            <summary>
            Current data length.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.DataStream.Ind">
            <summary>
            Current index.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Files.DataStream.CanRead">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Files.DataStream.CanSeek">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Files.DataStream.CanWrite">
            <summary>
            Returns true.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Files.DataStream.Length">
            <summary>
            Get length.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Files.DataStream.Position">
            <summary>
            Get or set position index.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.#ctor(System.Byte[])">
            <summary>
            Constructs a data stream with bytes pre-loaded.
            </summary>
            <param name="bytes">The bytes to pre-load.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.#ctor">
            <summary>
            Constructs an empty data stream.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.#ctor(System.Int32)">
            <summary>
            Constructs a datastream with a specific capacity.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.Flush">
            <summary>
            Does nothing!
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set to a specific location.
            </summary>
            <param name="offset">Where to move to.</param>
            <param name="origin">What position to seek relative to.</param>
            <returns>New index.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.SetLength(System.Int64)">
            <summary>
            Set the length of the stream.
            </summary>
            <param name="res_len">The resultant length.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.SetCapacity(System.Int64)">
            <summary>
            Set the length of the underlying buffer.
            </summary>
            <param name="res_len">The resultant length.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.ReadByte">
            <summary>
            Reads a single byte, or returns -1.
            </summary>
            <returns>The byte read.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read some data.
            </summary>
            <param name="buffer">Data read buffer.</param>
            <param name="offset">Start index.</param>
            <param name="count">Length.</param>
            <returns>Bytes read.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write some data.
            </summary>
            <param name="buffer">Data to write.</param>
            <param name="offset">Start index.</param>
            <param name="count">Length.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataStream.ToArray">
            <summary>
            Returns the internal data array.
            </summary>
            <returns>Bytes.</returns>
        </member>
        <member name="T:FreneticGameCore.Files.DataWriter">
            <summary>
            Helper for writing data to a stream.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.DataWriter.Internal">
            <summary>
            The internal stream.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.#ctor(FreneticGameCore.Files.DataStream)">
            <summary>
            Constructs the data writer.
            </summary>
            <param name="stream">The base stream.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteLocation(FreneticGameCore.Location)">
            <summary>
            Write a location object (24 bytes).
            </summary>
            <param name="loc">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteByte(System.Byte)">
            <summary>
            Write a byte.
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteSByte(System.SByte)">
            <summary>
            Write a signed byte.
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteBool(System.Boolean)">
            <summary>
            Write a bool.
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteChar(System.Char)">
            <summary>
            Write a character (2 bytes).
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteShort(System.Int16)">
            <summary>
            Write a short integer (2 bytes).
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteUShort(System.UInt16)">
            <summary>
            Write an unsigned short integer (2 bytes).
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteInt(System.Int32)">
            <summary>
            Write an integer (4 bytes).
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteUInt(System.UInt32)">
            <summary>
            Write an unsigned integer (4 bytes).
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteFloat(System.Single)">
            <summary>
            Write a float (4 bytes).
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteDouble(System.Double)">
            <summary>
            Write a double (8 bytes).
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteLong(System.Int64)">
            <summary>
            Write a long integer (8 bytes).
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteULong(System.UInt64)">
            <summary>
            Write an unsigned long integer (8 bytes).
            </summary>
            <param name="x">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteBytes(System.Byte[])">
            <summary>
            Write a set of bytes directly to the stream.
            </summary>
            <param name="bits">The bytes.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteFullBytes(System.Byte[])">
            <summary>
            Write a "full set" of bytes to the stream: prefixing the bytes with a 4-byte length indicator.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:FreneticGameCore.Files.DataWriter.WriteFullString(System.String)">
            <summary>
            Write a "full" string to the stream: prefixing the string with a 4-byte length indicator.
            </summary>
            <param name="str">The data.</param>
        </member>
        <member name="T:FreneticGameCore.Files.FileHandler">
            <summary>
            Handles the file system cleanly.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.FileHandler.Paks">
            <summary>
            All PAK files known to the system.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.FileHandler.Files">
            <summary>
            All data files known to the system.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.FileHandler.FileMap">
            <summary>
            A map of all files known to the system.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.FileHandler.encoding">
            <summary>
            The default text encoding.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.FileHandler.BaseDirectory">
            <summary>
            The base directory in which all data is stored.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.FileHandler.SubDirectories">
            <summary>
            All sub-directories used by the system.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.LoadDir(System.String)">
            <summary>
            Loads a new subdirectory.
            </summary>
            <param name="dir">The directory name.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.ClearAll">
            <summary>
            Clears away all file data.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.FileHandler.SaveDir">
            <summary>
            The current save directory.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.SetSaveDirEarly(System.String)">
            <summary>
            Call early in running to set a save directory prior to loading.
            </summary>
            <param name="dir">The save directory.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.SetSaveDirLate(System.String)">
            <summary>
            Call late in running to set a save directory after having already loaded.
            </summary>
            <param name="dir">The save directory.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.Init">
            <summary>
            Initialize the file system.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.Load(System.String,System.String[])">
            <summary>
            Load a set of files from a path.
            </summary>
            <param name="pth">The path.</param>
            <param name="allfiles">A list of all files that need to be loaded.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.CleanFileName(System.String)">
            <summary>
            Cleans a file name for direct system calls.
            </summary>
            <param name="input">The original file name.</param>
            <returns>The cleaned file name.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.FileIndex(System.String)">
            <summary>
            Gets the index of a file by name.
            </summary>
            <param name="filename">The name of the file.</param>
            <returns>The index, or -1 if not found.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.Exists(System.String)">
            <summary>
            Returns whether a file exists.
            </summary>
            <param name="filename">The name of the file to look for.</param>
            <returns>Whether the file exists.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.ReadBytes(System.String,FreneticGameCore.Files.PakkedFile@,System.Boolean)">
            <summary>
            Returns all the byte data in a file.
            </summary>
            <param name="filename">The name of the file to read.</param>
            <param name="journal">Whether to use a journalling read for file system files.</param>
            <param name="fref">Output file reference.</param>
            <returns>The file's data, as a byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.ReadToStream(System.String,FreneticGameCore.Files.PakkedFile@)">
            <summary>
            Returns a stream of the byte data in a file.
            </summary>
            <param name="filename">The name of the file to read.</param>
            <param name="fref">Output file reference.</param>
            <returns>The file's data, as a stream.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.ReadBytes(System.String,System.Boolean)">
            <summary>
            Returns all the byte data in a file.
            </summary>
            <param name="filename">The name of the file to read.</param>
            <param name="journal">Whether to use a journalling read for file system files.</param>
            <returns>The file's data, as a byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.ReadToStream(System.String)">
            <summary>
            Returns a stream of the byte data in a file.
            </summary>
            <param name="filename">The name of the file to read.</param>
            <returns>The file's data, as a stream.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.ReadText(System.String,System.Boolean)">
            <summary>
            Returns all the text data in a file.
            </summary>
            <param name="filename">The name of the file to read.</param>
            <param name="journal">Whether to use a journalling read for file system files.</param>
            <returns>The file's data, as a string.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.ListFolders(System.String)">
            <summary>
            Returns a list of all folders that contain the filepath.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.ListFiles(System.String)">
            <summary>
            Returns a list of all files inside a folder.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.CreateDirectory(System.String)">
            <summary>
            Creates a file system directory for a path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.WriteBytes(System.String,System.Byte[])">
            <summary>
            Writes bytes to a file.
            </summary>
            <param name="filename">The name of the file to write to.</param>
            <param name="bytes">The byte data to write.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.JournalSaveBytes(System.String,System.Byte[])">
            <summary>
            Save bytes to a file, journalling mode.
            </summary>
            <param name="filename">The file to save to.</param>
            <param name="bytes">The bytes to write.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.JournalWriteText(System.String,System.String)">
            <summary>
            Writes text to a file.
            </summary>
            <param name="filename">The name of the file to write to.</param>
            <param name="text">The text data to write.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.WriteText(System.String,System.String)">
            <summary>
            Writes text to a file.
            </summary>
            <param name="filename">The name of the file to write to.</param>
            <param name="text">The text data to write.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.AppendText(System.String,System.String)">
            <summary>
            Adds text to a file.
            </summary>
            <param name="filename">The name of the file to add to.</param>
            <param name="text">The text data to add.</param>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.Compress(System.Byte[])">
            <summary>
            Compresses a byte array.
            </summary>
            <param name="input">Uncompressed data.</param>
            <returns>Compressed data.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.Uncompress(System.Byte[])">
            <summary>
            Decompress a byte array.
            </summary>
            <param name="input">Compressed data.</param>
            <returns>Uncompressed data.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.GZip(System.Byte[])">
            <summary>
            Compresses a byte array using the GZip algorithm.
            </summary>
            <param name="input">Uncompressed data.</param>
            <returns>Compressed data.</returns>
        </member>
        <member name="M:FreneticGameCore.Files.FileHandler.UnGZip(System.Byte[])">
            <summary>
            Decompress a byte array using the GZip algorithm.
            </summary>
            <param name="input">Compressed data.</param>
            <returns>Uncompressed data.</returns>
        </member>
        <member name="T:FreneticGameCore.Files.PakkedFile">
            <summary>
            Represents a file available to the <see cref="T:FreneticGameCore.Files.FileHandler"/>.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakkedFile.Name">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakkedFile.Handle">
            <summary>
            The full path of the file.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakkedFile.MainDirectory">
            <summary>
            The directory of the file. Generally the full file system path of the default data directory or a sub directory.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakkedFile.MainPak">
            <summary>
            The pak that contains this file, if any.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakkedFile.IsPakked">
            <summary>
            Whether the file is in a PAK file.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakkedFile.PakIndex">
            <summary>
            The index in a PAK file, or -1.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakkedFile.FileListIndex">
            <summary>
            The index in the file list.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakkedFile.Entry">
            <summary>
            The PAK file inner file object.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.PakkedFile.#ctor(System.String,System.String)">
            <summary>
            Constructs a pakked file.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="handle">The system file path.</param>
        </member>
        <member name="M:FreneticGameCore.Files.PakkedFile.#ctor(System.String,System.String,System.Int32,System.IO.Compression.ZipStorer.ZipFileEntry)">
            <summary>
            Constructs a pakked file.
            </summary>
            <param name="name">The file name.</param>
            <param name="handle">The PAK file path.</param>
            <param name="index">The PAK index.</param>
            <param name="entry">The PAK entry.</param>
        </member>
        <member name="T:FreneticGameCore.Files.PakFile">
            <summary>
            Represents a PAK file for use by the <see cref="T:FreneticGameCore.Files.FileHandler"/>.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakFile.Name">
            <summary>
            The name of the PAK file.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakFile.Handle">
            <summary>
            The path of the PAK file.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakFile.Storer">
            <summary>
            The PAK file object.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Files.PakFile.FileListIndex">
            <summary>
            The index in the file list.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.PakFile.#ctor(System.String,System.String)">
            <summary>
            Constructs the PAK file.
            </summary>
            <param name="name">The name of the file.</param>
            <param name="handle">The path of the file.</param>
        </member>
        <member name="T:FreneticGameCore.Files.UnknownFileException">
            <summary>
            Wraps a System.IO.FileNotFoundException.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Files.UnknownFileException.#ctor(System.String)">
            <summary>
            Constructs an UnknownFileException.
            </summary>
            <param name="filename">The name of the unknown file.</param>
        </member>
        <member name="T:FreneticGameCore.Location">
            <summary>
            Represents a 3D location, using 3 double-precision floating-point coordinates.
            Occupies 24 bytes, calculated as 8 * 3, as it has 3 fields (X, Y, Z) each occupying 8 bytes (a double).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Location.Zero">
            <summary>
            A Location of (0, 0, 0).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Location.One">
            <summary>
            A Location of (1, 1, 1).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Location.UnitX">
            <summary>
            A location of (1, 0, 0).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Location.UnitY">
            <summary>
            A location of (0, 1, 0).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Location.UnitZ">
            <summary>
            A location of (0, 0, 1).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Location.NaN">
            <summary>
            A location of (NaN, NaN, NaN).
            </summary>
        </member>
        <member name="F:FreneticGameCore.Location.X">
            <summary>
            The X coordinate of this location.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Location.Y">
            <summary>
            The Y coordinate of this location.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Location.Z">
            <summary>
            The Z coordinate of this location.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Location.XF">
            <summary>
            Returns X as a float.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Location.YF">
            <summary>
            Returns Y as a float.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Location.ZF">
            <summary>
            Returns Z as a float.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Location.Yaw">
            <summary>
            If this location is an angle set, returns the Yaw value of this angle set.
            Equivalent to Z.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Location.Pitch">
            <summary>
            If this location is an angle set, returns the Pitch value of this angle set.
            Equivalent to Y.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Location.Roll">
            <summary>
            If this location is an angle set, returns the Roll value of this angle set.
            Equivalent to X.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Location.Item(System.Int32)">
            <summary>
            Gets or sets a coordinate from this Location.
            This is a slow operation.
            X = 0, Y = 1, Z = 2.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Location.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Location, with all coordinates individually specified.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Location.#ctor(System.Double)">
            <summary>
            Constructs a Location where all three coordinates are set to a single value.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Location.#ctor(BEPUutilities.Vector3)">
            <summary>
            Constructs a Location from a BEPUPhysics Vector3 structure, perfectly replicating it.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Location.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a Location, with all coordinates individually specified.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Location.#ctor(System.Single)">
            <summary>
            Constructs a Location where all three coordinates are set to a single value.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Location.DistanceSquared_Flat(FreneticGameCore.Location)">
            <summary>
            Returns the flat (X/Y) linear distance of the vector location to another vector location, squared for efficiency.
            </summary>
            <returns>The squared distance.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.DistanceSquared(FreneticGameCore.Location)">
            <summary>
            Returns the full linear distance of the vector location to another vector location, squared for efficiency.
            </summary>
            <returns>The squared distance.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.Distance(FreneticGameCore.Location)">
            <summary>
            Returns the full linear distance of the vector location to another vector location, which goes through a square-root operation (inefficient).
            </summary>
            <returns>The square-rooted distance.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.LengthSquared">
            <summary>
            Returns the full linear length of the vector location, squared for efficiency.
            </summary>
            <returns>The squared length.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.Length">
            <summary>
            Returns the full linear length of the vector location, which goes through a square-root operation (inefficient).
            </summary>
            <returns>The square-rooted length.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.IsNaN">
            <summary>
            Returns whether the location is NaN.
            </summary>
            <returns>whether the location is NaN.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.IsInfinite">
            <summary>
            Returns whether the location is infinite.
            </summary>
            <returns>whether the location is infinite.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.Dot(FreneticGameCore.Location)">
            <summary>
            Returns the dot product of this and another location.
            </summary>
            <param name="two">The second location.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.ToString">
            <summary>
            Returns the location as a string in the form: (X, Y, Z)
            Inverts .FromString()
            </summary>
            <returns>The location string.</returns>
        </member>
        <member name="F:FreneticGameCore.Location.BasicFormat">
            <summary>
            The number format for <see cref="M:FreneticGameCore.Location.ToBasicString"/>.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Location.ToBasicString">
            <summary>
            Returns the location as a string in the form (X, Y, Z) with short decimals (2 places).
            Inverts .FromString()
            </summary>
            <returns>The basic location string.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.ToSimpleString">
            <summary>
            Returns the location as a string in the form: X, Y, Z
            Inverts .FromString()
            </summary>
            <returns>The location string.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.Normalize">
            <summary>
            Returns a normal form of this location.
            </summary>
            <returns>A valid normal location.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.CrossProduct(FreneticGameCore.Location)">
            <summary>
            Returns the cross product of this location with another.
            </summary>
            <param name="two">The second location vector.</param>
            <returns>The cross product of the two.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.Reflect(FreneticGameCore.Location)">
            <summary>
            Reflect a location vector against a normal.
            </summary>
            <param name="normal">The normal vector.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.ToDoubleBytes">
            <summary>
            Converts the Location to a simple byte[] representation.
            Contains 24 bytes.
            Inverts <see cref="M:FreneticGameCore.Location.FromDoubleBytes(System.Byte[],System.Int32)"/>.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Location.Duplicate">
            <summary>
            Returns a copy of this location.
            </summary>
            <returns>A copy of the location.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.Equals(System.Object)">
            <summary>
            Returns whether this location matches any given generic object.
            </summary>
            <param name="obj">The object.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.Equals(FreneticGameCore.Location)">
            <summary>
            Returns wether this location equals another location.
            </summary>
            <param name="v">The second location.</param>
            <returns>Whether they are equal.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.op_Equality(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Returns whether two locations are equal.
            </summary>
            <param name="v1">The first location.</param>
            <param name="v2">The second location.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Inequality(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Returns whether two locations are not equal.
            </summary>
            <param name="v1">The first location.</param>
            <param name="v2">The second location.</param>
        </member>
        <member name="M:FreneticGameCore.Location.GetHashCode">
            <summary>
            Gets a quick generic hash code for the location data.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.op_Addition(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Adds two locations.
            </summary>
            <param name="v1">The first location.</param>
            <param name="v2">The second location.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_UnaryNegation(FreneticGameCore.Location)">
            <summary>
            Negates a location.
            </summary>
            <param name="v">The first location.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Subtraction(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Subtracts two locations.
            </summary>
            <param name="v1">The first location.</param>
            <param name="v2">The second location.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Multiply(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Multiplies two locations.
            </summary>
            <param name="v1">The first location.</param>
            <param name="v2">The second location.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Division(FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Divides two locations.
            </summary>
            <param name="v1">The first location.</param>
            <param name="v2">The second location.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Multiply(FreneticGameCore.Location,System.Double)">
            <summary>
            Multiplies a location by a scalar.
            </summary>
            <param name="v">The location.</param>
            <param name="scale">The scalar.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Multiply(System.Double,FreneticGameCore.Location)">
            <summary>
            Multiplies a location by a scalar.
            </summary>
            <param name="v">The location.</param>
            <param name="scale">The scalar.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Multiply(FreneticGameCore.Location,System.Single)">
            <summary>
            Multiplies a location by a scalar.
            </summary>
            <param name="v">The location.</param>
            <param name="scale">The scalar.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Multiply(System.Single,FreneticGameCore.Location)">
            <summary>
            Multiplies a location by a scalar.
            </summary>
            <param name="v">The location.</param>
            <param name="scale">The scalar.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Division(FreneticGameCore.Location,System.Double)">
            <summary>
            Divides a location by a scalar.
            </summary>
            <param name="v">The location.</param>
            <param name="scale">The scalar.</param>
        </member>
        <member name="M:FreneticGameCore.Location.op_Division(FreneticGameCore.Location,System.Single)">
            <summary>
            Divides a location by a scalar.
            </summary>
            <param name="v">The location.</param>
            <param name="scale">The scalar.</param>
        </member>
        <member name="M:FreneticGameCore.Location.FromString(System.String)">
            <summary>
            Converts a string representation of a location to a Location object.
            Inverts .ToString(), .ToSimpleString()
            </summary>
            <param name="input">The location string.</param>
            <returns>the location object.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.FromDoubleBytes(System.Byte[],System.Int32)">
            <summary>
            Reads the byte array to a Location object.
            Expects 24 bytes.
            Inverts <see cref="M:FreneticGameCore.Location.ToDoubleBytes"/>.
            </summary>
            <param name="bytes">The bytes to read.</param>
            <param name="index">The index to start at.</param>
            <returns>the location object.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.ToBVector">
            <summary>
            Converts the Location to a BEPUPhysics Vector3.
            </summary>
            <returns>.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.GetBlockLocation">
            <summary>
            Gets the location of the block this location is within. (Round-down all values).
            </summary>
            <returns>The block location.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.ToVec3i">
            <summary>
            Converts the Location to an integer vector.
            </summary>
            <returns>The integer vector.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.GetUpperBlockBorder">
            <summary>
            Gets the location of the next block corner up from this location. (Round-up all values).
            </summary>
            <returns>The block location.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.Max(FreneticGameCore.Location)">
            <summary>
            Returns the bigger valued coordinates for each of X, Y, and Z. Essentially, applies Math.Max to each coordinate.
            </summary>
            <param name="two">The second Location vector.</param>
            <returns>The bigger valued coordinates.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.Min(FreneticGameCore.Location)">
            <summary>
            Returns the smaller valued coordinates for each of X, Y, and Z. Essentially, applies Math.Min to each coordinate.
            </summary>
            <param name="two">The second Location vector.</param>
            <returns>The smaller valued coordinates.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.BiggestValue">
            <summary>
            Returns the biggest coordinate in this location (biggest of X, Y, or Z).
            </summary>
            <returns>The biggest coordinate.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.SmallestValue">
            <summary>
            Returns the smallest coordinate in this location (samallest of X, Y, or Z).
            </summary>
            <returns>The smallest coordinate.</returns>
        </member>
        <member name="M:FreneticGameCore.Location.AddThree(FreneticGameCore.Location@,FreneticGameCore.Location@,FreneticGameCore.Location@,FreneticGameCore.Location@)">
            <summary>
            Accelerated method of adding 3 locations together, for debug reasons.
            </summary>
        </member>
        <member name="T:FreneticGameCore.LockedLinkedList`1">
            <summary>
            This class isn't actually entirely locked/thread-safe, or even entirely functional as a linked-list, only done sufficiently for its first immediate use-case.
            Use with caution. Probably don't use beyond as a starting point reference really.
            </summary>
        </member>
        <member name="T:FreneticGameCore.LockedLinkedList`1.Node">
            <summary>
            A single node of a LockedLinkedList.
            </summary>
        </member>
        <member name="F:FreneticGameCore.LockedLinkedList`1.Node.Previous">
            <summary>
            The previous node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.LockedLinkedList`1.Node.Next">
            <summary>
            The next node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.LockedLinkedList`1.Node.Data">
            <summary>
            The data held by this node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.LockedLinkedList`1.First">
            <summary>
            The first node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.LockedLinkedList`1.Last">
            <summary>
            The last node.
            </summary>
        </member>
        <member name="F:FreneticGameCore.LockedLinkedList`1.lastLock">
            <summary>
            Locker object for the last node.
            </summary>
        </member>
        <member name="M:FreneticGameCore.LockedLinkedList`1.Remove(FreneticGameCore.LockedLinkedList{`0}.Node)">
            <summary>
            Do NOT input null. There is no safety check, and that will produce unexpected results!
            </summary>
        </member>
        <member name="M:FreneticGameCore.LockedLinkedList`1.AddAtEnd(`0)">
            <summary>
            Add an entry to the end.
            </summary>
            <param name="data">The data to add.</param>
        </member>
        <member name="M:FreneticGameCore.LockedLinkedList`1.Clear">
            <summary>
            Clear the list.
            </summary>
        </member>
        <member name="T:FreneticGameCore.MTRandom">
            <summary>
            Mersenne-Twister Random implementation.
            Based on a few sources, mostly wikipedia for some reason.
            </summary>
        </member>
        <member name="F:FreneticGameCore.MTRandom.lower_mask">
            <summary>
            A lower integer bit mask.
            </summary>
        </member>
        <member name="F:FreneticGameCore.MTRandom.upper_mask">
            <summary>
            A higher integer bit mask.
            </summary>
        </member>
        <member name="F:FreneticGameCore.MTRandom.mt">
            <summary>
            The current buffer.
            </summary>
        </member>
        <member name="F:FreneticGameCore.MTRandom.index">
            <summary>
            The current index in the buffer.
            </summary>
        </member>
        <member name="M:FreneticGameCore.MTRandom.#ctor">
            <summary>
            Constructs the MT Random with a current-time-based seed.
            </summary>
        </member>
        <member name="M:FreneticGameCore.MTRandom.#ctor(System.UInt64)">
            <summary>
            Constructs the MT Random with a specific seed.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:FreneticGameCore.MTRandom.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructs the MT Random with a specific seed and specific buffer size.
            </summary>
            <param name="n">The buffer size.</param>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:FreneticGameCore.MTRandom.Next">
            <summary>
            Gets a random integer.
            </summary>
        </member>
        <member name="M:FreneticGameCore.MTRandom.Next(System.Int32)">
            <summary>
            Gets a random integer up to a cap.
            </summary>
        </member>
        <member name="M:FreneticGameCore.MTRandom.Next(System.Int32,System.Int32)">
            <summary>
            Gets a random integer between two bounds.
            </summary>
        </member>
        <member name="M:FreneticGameCore.MTRandom.NextDouble">
            <summary>
            Gets a random double, between 0 and 1.
            </summary>
        </member>
        <member name="M:FreneticGameCore.MTRandom.NextDouble(System.Double)">
            <summary>
            Gets a random double, between 0 and cap.
            </summary>
            <param name="cap">The upper limit.</param>
        </member>
        <member name="M:FreneticGameCore.MTRandom.NextDouble(System.Double,System.Double)">
            <summary>
            Gets a random double, between two bounds.
            </summary>
            <param name="min">The lower limit.</param>
            <param name="cap">The upper limit.</param>
        </member>
        <member name="M:FreneticGameCore.MTRandom.NextUL">
            <summary>
            Gets a random unsigned long.
            </summary>
        </member>
        <member name="T:FreneticGameCore.PriorityQueue`1">
            <summary>
            Helper for live-sorted queues of data.
            </summary>
            <typeparam name="T">The data type at hand.</typeparam>
        </member>
        <member name="T:FreneticGameCore.PriorityQueue`1.Node">
            <summary>
            Represents a single node in a queue.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PriorityQueue`1.Node.Data">
            <summary>
            The data at hand.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PriorityQueue`1.Node.Priority">
            <summary>
            The priority of the data.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PriorityQueue`1.start">
            <summary>
            Where the queue starts.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PriorityQueue`1.numNodes">
            <summary>
            How many nodes are actually in the queue.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PriorityQueue`1.nodes">
            <summary>
            All current nodes.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Constructs the priority queue.
            </summary>
            <param name="capacity">The capacity to prepare.</param>
        </member>
        <member name="P:FreneticGameCore.PriorityQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="P:FreneticGameCore.PriorityQueue`1.Capacity">
            <summary>
            Gets the present capacity already prepared.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PriorityQueue`1.Clear">
            <summary>
            Clears the queue quickly.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PriorityQueue`1.Enqueue(`0@,System.Double)">
            <summary>
            Enqueues a new item.
            </summary>
            <param name="nodeData">The data.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:FreneticGameCore.PriorityQueue`1.Dequeue">
            <summary>
            Dequeues the highest priority item.
            DO NOT CALL IF COUNT IS ZERO!
            </summary>
            <returns>The item dequeued.</returns>
        </member>
        <member name="M:FreneticGameCore.PriorityQueue`1.Resize">
            <summary>
            Internal method to resize the queue or move it sideways to fit new data.
            </summary>
        </member>
        <member name="P:FreneticGameCore.PriorityQueue`1.First">
            <summary>
            Gets the first item.
            </summary>
        </member>
        <member name="T:FreneticGameCore.Program">
            <summary>
            Represents the current program abstractly.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Program.Instance">
            <summary>
            The current program instance.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Program.SystemCulture">
            <summary>
            The original system culture.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Program.PreInit(FreneticGameCore.Program)">
            <summary>
            This method should be called FIRST!
            Enforces the correct (Invariant) culture locale setting!
            </summary>
        </member>
        <member name="F:FreneticGameCore.Program.Name">
            <summary>
            The name of this program.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Program.Version">
            <summary>
            The version (number) of this program.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Program.VersionDescription">
            <summary>
            The version description of this program.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Program.GameName">
            <summary>
            The current program's game name.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Program.GameVersion">
            <summary>
            The current program's game version.
            </summary>
        </member>
        <member name="P:FreneticGameCore.Program.GameVersionDescription">
            <summary>
            The current program's game version description.
            (EG "Release", "Beta", or "Alpha" usually).
            </summary>
        </member>
        <member name="M:FreneticGameCore.Program.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct the program descriptor.
            </summary>
            <param name="_name">Game name.</param>
            <param name="_version">Game version.</param>
            <param name="_versdesc">Game version descriptor.</param>
        </member>
        <member name="T:FreneticGameCore.PropertySaverLoader">
            <summary>
            Represents a helper to save or load an object.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertySaverLoader.SaveString">
            <summary>
            The save name.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertySaverLoader.Saver">
            <summary>
            The save method.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertySaverLoader.Loader">
            <summary>
            The load method.
            </summary>
        </member>
        <member name="T:FreneticGameCore.PropertyHolder">
            <summary>
            Holds an uncapped set of properties.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHolder.TypeSavers">
            <summary>
            All type saver methods.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.#cctor">
            <summary>
            Ensures initialization.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHolder.Initted">
            <summary>
            Whether the system is already inited.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.EnsureInit">
            <summary>
            Configures the default set of savers and readers for the FGE core.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHolder.HeldProperties">
            <summary>
            All currently held properties on this object.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHolder.HeldInterfaces">
            <summary>
            All currently held interfaces on this object.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHolder.DefaultReturn">
            <summary>
            Special helper: Default empty list for some returns.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.GetAllInterfacedProperties(System.Type)">
            <summary>
            Gets all properties with a specific interface.
            Note that this is faster but less clean than <see cref="M:FreneticGameCore.PropertyHolder.GetAllInterfacedProperties``1"/>.
            Good for foreach loops. Bad for when you need a typed list.
            </summary>
            <param name="t">The type of the interface.</param>
            <returns>All the objects.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.GetAllInterfacedProperties``1">
            <summary>
            Gets all properties with a specific interface.
            Note that this is slower but cleaner than <see cref="M:FreneticGameCore.PropertyHolder.GetAllInterfacedProperties(System.Type)"/>.
            Good for when you need a typed list. Bad for foreach loops.
            </summary>
            <typeparam name="T">The type of the interface.</typeparam>
            <returns>All the objects.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.SignalAllInterfacedProperties``1(System.Action{``0})">
            <summary>
            Sends a signal to all properties with a specific interface.
            </summary>
            <typeparam name="T">The type of the interface.</typeparam>
            <param name="signal">The signal to send.</param>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.GetAllPropertyTypes">
            <summary>
            Gets all currently held property types in a safe copied container.
            </summary>
            <returns>The set of property types.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.GetAllProperties">
            <summary>
            Gets all currently held properties in a safe copied container.
            </summary>
            <returns>The set of properties.</returns>
        </member>
        <member name="P:FreneticGameCore.PropertyHolder.PropertyCount">
            <summary>
            Returns the number of properties held by this holder.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.HasProperty(System.Type)">
            <summary>
            Checks whether a property of a specified type is held.
            </summary>
            <param name="t">The type.</param>
            <returns>Whether it was removed.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.HasProperty``1">
            <summary>
            Checks whether a property of a specified type is held.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether it is held.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.ForgetProperty(System.Type,FreneticGameCore.Property)">
            <summary>
            Internal: forget a property from this property holder.
            </summary>
            <param name="t">The type.</param>
            <param name="p">The property of relevance.</param>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.RemoveProperty(System.Type)">
            <summary>
            Removes the property by type, returning whether it was removed.
            </summary>
            <param name="t">The type.</param>
            <returns>Whether it was removed.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.RemoveProperty``1">
            <summary>
            Removes the property by type, returning whether it was removed.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>Whether it was removed.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.TryGetProperty(System.Type,FreneticGameCore.Property@)">
            <summary>
            Gets the property by type, or returns false.
            </summary>
            <param name="t">The type.</param>
            <param name="p">The property result.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.TryGetProperty``1(``0@)">
            <summary>
            Gets the property (with a typeparam-specified type), or returns false.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="p">The property result.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.GetProperty(System.Type)">
            <summary>
            Gets the property by type, or gives an exception.
            </summary>
            <param name="t">The type.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.GetProperty``1">
            <summary>
            Gets the property (with a typeparam-specified type), or gives an exception.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <returns>The property.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.NoticeProperty(System.Type,FreneticGameCore.Property)">
            <summary>
            Internal: Notice a property.
            </summary>
            <param name="t">The type.</param>
            <param name="p">The property.</param>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.AddProperty(FreneticGameCore.Property)">
            <summary>
            Adds the property, or gives an exception if a property of matching type already exists.
            </summary>
            <param name="prop">The property itself.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.GetOrAddProperty(System.Type,System.Func{FreneticGameCore.Property})">
            <summary>
            Gets the property (with a generic type), or adds the property with the specified property constructor.
            May still throw an exception, if the property is held elsewhere!
            </summary>
            <param name="t">The property type.</param>
            <param name="constructor">The property constructor.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.GetOrAddProperty``1(System.Func{``0})">
            <summary>
            Gets the property (with a generic type), or adds the property with the specified property constructor.
            <para>May still throw an exception, if the property is held elsewhere!</para>
            <para>Be careful with this, as it can lead to incorrect typing if the Func input has an incorrect type!</para>
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <returns>The property.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.OnAdded(FreneticGameCore.Property)">
            <summary>
            Called when a property is added.
            </summary>
            <param name="prop">The property.</param>
        </member>
        <member name="M:FreneticGameCore.PropertyHolder.OnRemoved(FreneticGameCore.Property)">
            <summary>
            Called when a property is removed.
            </summary>
            <param name="prop">The property.</param>
        </member>
        <member name="T:FreneticGameCore.PropertyDebuggable">
            <summary>
            Used to indicate that a property field is debuggable (if not marked, the property field is not debuggable).
            </summary>
        </member>
        <member name="T:FreneticGameCore.PropertyAutoSavable">
            <summary>
            Used to indicate that a property field is auto-saveable (if not marked, the property field is not auto-saveable).
            </summary>
        </member>
        <member name="T:FreneticGameCore.PropertyHelper">
            <summary>
            Helper for the systems on a property.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.PropertiesHelper">
            <summary>
            A mapping of types to their property maps. Do note: if a type object is lost (Assembly is collected and dropped), the properties on that type are also lost.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PropertyHelper.EnsureHandled(System.Type)">
            <summary>
            Ensures a type is handled by the system, and returns the helper for the type.
            </summary>
            <param name="t">The type.</param>
            <returns>The helper for the type.</returns>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.Method_Object_ToString">
            <summary>
            The <see cref="M:System.Object.ToString"/> method.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.Method_DictionaryStringString_Add">
            <summary>
            The <see cref="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)"/> method.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.Method_PropertyHelper_GetDebuggableInfoOutput">
            <summary>
            The <see cref="M:FreneticGameCore.PropertyHelper.GetDebuggableInfoOutput(FreneticGameCore.Property,System.Collections.Generic.Dictionary{System.String,System.String})"/> method.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.Method_PropertyHelper_Stringify">
            <summary>
            The <see cref="M:FreneticGameCore.PropertyHelper.Stringify(System.Object)"/> method.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.Method_PropertyHelper_StringifyStruct">
            <summary>
            The <see cref="M:FreneticGameCore.PropertyHelper.StringifyStruct``1(``0)"/> method.
            </summary>
        </member>
        <member name="M:FreneticGameCore.PropertyHelper.StringifyStruct``1(``0)">
            <summary>
            Safely converts a struct to a string.
            </summary>
            <param name="a">The struct.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHelper.Stringify(System.Object)">
            <summary>
            Safely converts an object to a string.
            </summary>
            <param name="a">The object.</param>
            <returns>The string, or "null".</returns>
        </member>
        <member name="M:FreneticGameCore.PropertyHelper.GetDebuggableInfoOutput(FreneticGameCore.Property,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Call this method to get debuggable information output added to a string dictionary.
            </summary>
            <param name="p">The property.</param>
            <param name="vals">The string dictionary.</param>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.PropertyType">
            <summary>
            The type of the property to monitor.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.GetterMethodsDebuggable">
            <summary>
            A list of all getter methods that are debuggable.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.FieldsDebuggable">
            <summary>
            A list of all fields that are debuggable.
            </summary>
        </member>
        <member name="F:FreneticGameCore.PropertyHelper.FieldsAutoSaveable">
            <summary>
            A list of all fields that are auto-saveable.
            </summary>
        </member>
        <member name="T:FreneticGameCore.Property">
            <summary>
            Represents a set of custom data attached to an object.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Property.Holder">
            <summary>
            The holder of this property. Modifying this value could lead to errors!
            </summary>
        </member>
        <member name="F:FreneticGameCore.Property.Helper">
            <summary>
            The system that helps this property's field information.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Property.GetDebuggable">
            <summary>
            Gets the debug output for this property.
            </summary>
            <returns>The debuggable data.</returns>
        </member>
        <member name="M:FreneticGameCore.Property.IsHeld">
            <summary>
            Returns whether this property is currently held by something.
            </summary>
            <returns>Whether it is held.</returns>
        </member>
        <member name="M:FreneticGameCore.Property.IsHeld(FreneticGameCore.PropertyHolder@)">
            <summary>
            Returns whether this property is currently held by something, and outputs the holder if so (otherwise, outputs null).
            </summary>
            <param name="outholder">The holder output.</param>
            <returns>Whether it is held.</returns>
        </member>
        <member name="M:FreneticGameCore.Property.GetPropertyName">
            <summary>
            This will return the best available type name for the current property: either the property classname, or a custom specified name given by the property definition.
            </summary>
            <returns>The property type name.</returns>
        </member>
        <member name="M:FreneticGameCore.Property.DuplicateClean">
            <summary>
            This will return a clean (no 'holder' value) duplicate of the property.
            This is NOT guaranteed to be a deep copy (but should be where possible): defaults to a shallow copy!
            </summary>
        </member>
        <member name="M:FreneticGameCore.Property.OnAdded">
            <summary>
            This is fired when the property is added to a system.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Property.OnRemoved">
            <summary>
            This is fired when the property is removed from a system.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Property.ToString">
            <summary>
            Gets a string-ified version of this property.
            </summary>
            <returns>The property string.</returns>
        </member>
        <member name="T:FreneticGameCore.Scheduler">
            <summary>
            Helper to schedule sync or async tasks.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Scheduler.Tasks">
            <summary>
            Current set of tasks.
            TODO: Could be a ConcurrentQueue? Probably should be, for that matter!
            </summary>
        </member>
        <member name="M:FreneticGameCore.Scheduler.GetSyncTask(System.Action,System.Double)">
            <summary>
            Gets a sync task object, not yet scheduled.
            </summary>
            <param name="act">The action to call.</param>
            <param name="delay">The delay value.</param>
            <returns>A schedule item.</returns>
        </member>
        <member name="M:FreneticGameCore.Scheduler.ScheduleSyncTask(System.Action,System.Double)">
            <summary>
            Creates and schedules a sync task.
            </summary>
            <param name="act">The action to run.</param>
            <param name="delay">How long before the task is called.</param>
            <returns>The scheduled item.</returns>
        </member>
        <member name="M:FreneticGameCore.Scheduler.RunAllSyncTasks(System.Double)">
            <summary>
            Ran every frame to cause all sync tasks to be processed.
            </summary>
            <param name="time">The delta time.</param>
        </member>
        <member name="M:FreneticGameCore.Scheduler.StartAsyncTask(System.Action,System.Boolean)">
            <summary>
            Starts an async task.
            </summary>
            <param name="a">The action to launch async.</param>
            <param name="prio">Whether this action is considered important.</param>
            <returns>The scheduled item.</returns>
        </member>
        <member name="M:FreneticGameCore.Scheduler.AddAsyncTask(System.Action,FreneticGameCore.ASyncScheduleItem)">
            <summary>
            Creates but does not start an async task.
            </summary>
            <param name="a">The action to launch async.</param>
            <param name="followUp">Optional followup task.</param>
            <returns>The created schedule item.</returns>
        </member>
        <member name="T:FreneticGameCore.ScheduleItem">
            <summary>
            Represents a schedulable item.
            </summary>
        </member>
        <member name="M:FreneticGameCore.ScheduleItem.RunMe">
            <summary>
            Runs the schedulable item.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ScheduleItem.OwningEngine">
            <summary>
            The relevant scheduler.
            </summary>
        </member>
        <member name="T:FreneticGameCore.SyncScheduleItem">
            <summary>
            Represents a synchronous scheduled item.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SyncScheduleItem.MyAction">
            <summary>
            The action to run.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SyncScheduleItem.Time">
            <summary>
            The time left before running.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SyncScheduleItem.RunMe">
            <summary>
            Causes the action to be run at the next frame.
            </summary>
        </member>
        <member name="T:FreneticGameCore.ASyncScheduleItem">
            <summary>
            Represents an asynchronous running item.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ASyncScheduleItem.MyAction">
            <summary>
            The action to run.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ASyncScheduleItem.FollowUp">
            <summary>
            The next thing to run in this sequence.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ASyncScheduleItem.Locker">
            <summary>
            Locker to prevent thread issues.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ASyncScheduleItem.Started">
            <summary>
            Whether the item has been started.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ASyncScheduleItem.Done">
            <summary>
            Whether the item is complete.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ASyncScheduleItem.UnImportant">
            <summary>
            Whether this event is unimportant, and thus can be treated as lower priority.
            </summary>
        </member>
        <member name="M:FreneticGameCore.ASyncScheduleItem.HasStarted">
            <summary>
            Gets whether the item has started.
            </summary>
        </member>
        <member name="M:FreneticGameCore.ASyncScheduleItem.IsDone">
            <summary>
            Gets whether the item is complete.
            </summary>
        </member>
        <member name="M:FreneticGameCore.ASyncScheduleItem.ReplaceOrFollowWith(FreneticGameCore.ASyncScheduleItem)">
            <summary>
            Replaces the schedule item if its not yet started, otherwises follows it with a new item.
            </summary>
            <param name="item">The replacement item.</param>
            <returns>The final item.</returns>
        </member>
        <member name="M:FreneticGameCore.ASyncScheduleItem.FollowWith(FreneticGameCore.ASyncScheduleItem)">
            <summary>
            Tells the item to follow the current item with a new one.
            </summary>
            <param name="item">The follower item.</param>
        </member>
        <member name="M:FreneticGameCore.ASyncScheduleItem.RunMe">
            <summary>
            Runs the item asynchronously immediately.
            </summary>
        </member>
        <member name="M:FreneticGameCore.ASyncScheduleItem.RunInternal">
            <summary>
            Internal runner for the item.
            </summary>
        </member>
        <member name="T:FreneticGameCore.ServerSystem.EntitySystem.ServerEntity">
            <summary>
            Represents an entity on the server side.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.EntitySystem.ServerEntity.ShouldNetwork">
            <summary>
            Whether this entity should be sent over the network.
            </summary>
        </member>
        <member name="P:FreneticGameCore.ServerSystem.EntitySystem.ServerEntity.Server">
            <summary>
            Gets the backing server engine.
            </summary>
        </member>
        <member name="M:FreneticGameCore.ServerSystem.EntitySystem.ServerEntity.#ctor(FreneticGameCore.ServerSystem.ServerEngine,System.Boolean,System.Boolean)">
            <summary>
            Constructs a server-side entity.
            </summary>
            <param name="engine">The owning engine.</param>
            <param name="_ticks">Whether it should tick.</param>
            <param name="_shouldNetwork">Whether it should network.</param>
        </member>
        <member name="M:FreneticGameCore.ServerSystem.EntitySystem.ServerEntity.ToString">
            <summary>
            Gets a string debug helper for this entity.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:FreneticGameCore.ServerSystem.EntitySystem.ServerEntityPhysics2DLimitProperty">
            <summary>
            Represents an entity physics-2D-limit property on the server.
            </summary>
        </member>
        <member name="T:FreneticGameCore.ServerSystem.EntitySystem.ServerEntityPhysicsProperty">
            <summary>
            Represents an entity physics property on the server.
            </summary>
        </member>
        <member name="T:FreneticGameCore.ServerSystem.EntitySystem.ServerEntityProperty">
            <summary>
            Represents a property on a server-side entity.
            </summary>
        </member>
        <member name="T:FreneticGameCore.ServerSystem.ServerEngine">
            <summary>
            Represents an engine on the server side.
            </summary>
        </member>
        <member name="M:FreneticGameCore.ServerSystem.ServerEngine.CreateEntity(System.Boolean)">
            <summary>
            Creates an entity.
            </summary>
            <param name="ticks">Whether it ticks.</param>
            <returns>The entity.</returns>
        </member>
        <member name="T:FreneticGameCore.ServerSystem.ServerGameInstance">
            <summary>
            An instance of a server game.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.Engines">
            <summary>
            Any and all engines running in this instance on the main level.
            </summary>
        </member>
        <member name="P:FreneticGameCore.ServerSystem.ServerGameInstance.DefaultEngine">
            <summary>
            Gets the "default" engine: the first in the <see cref="F:FreneticGameCore.ServerSystem.ServerGameInstance.Engines"/> list!
            </summary>
        </member>
        <member name="M:FreneticGameCore.ServerSystem.ServerGameInstance.#ctor">
            <summary>
            Constructs the server game instance.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.GlobalTickTime">
            <summary>
            How much time has passed since the instance first loaded.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.DeltaCounter">
            <summary>
            Used to calculate the <see cref="F:FreneticGameCore.ServerSystem.ServerGameInstance.Delta"/> value.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.TotalDelta">
            <summary>
            Used as part of accurate tick timing.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.TargetDelta">
            <summary>
            What delta amount the instance is currently trying to calculate at.
            Inverse of this is present target FPS.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.Target_FPS">
            <summary>
            Target frames per second.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.Delta">
            <summary>
            The current delta timing for the instance tick.
            Represents the amount of time passed since the last tick.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.NeedShutdown">
            <summary>
            Whether the instance is marked for shutdown as soon as possible.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.TickLock">
            <summary>
            Lock this object to prevent collision with the instance tick.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.TPS">
            <summary>
            The current tick rate of the server.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.Schedule">
            <summary>
            The scheduling system for this server.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.Source">
            <summary>
            The source object for this instance. Set to any tag style constant reference you find most helpful to keep!
            </summary>
        </member>
        <member name="M:FreneticGameCore.ServerSystem.ServerGameInstance.StartAndRun">
            <summary>
            Starts and runs the entire server game instance.
            Will take over present thread until completion.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ServerSystem.ServerGameInstance.tpsc">
            <summary>
            TPS Counter.
            </summary>
        </member>
        <member name="M:FreneticGameCore.ServerSystem.ServerGameInstance.Tick(System.Double)">
            <summary>
            Ticks the server and all engines.
            Called automatically by the standard run thread.
            </summary>
            <param name="delta">How much time has passed since the last tick.</param>
        </member>
        <member name="T:FreneticGameCore.SimplexNoise">
            <summary>
            Simplex noise helper.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SimplexNoise.Generate(System.Double,System.Double)">
            <summary>
            Generate 2D simplex noise.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The noise value.</returns>
        </member>
        <member name="M:FreneticGameCore.SimplexNoise.Generate(System.Double,System.Double,System.Double)">
            <summary>
            Generate 3D simplex noise.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
            <returns>The noise value.</returns>
        </member>
        <member name="T:FreneticGameCore.SimplexNoiseInternal">
            <summary>
            Implementation of the Perlin simplex noise, an improved Perlin noise algorithm.
            Based loosely on SimplexNoise1234 by Stefan Gustavson http://staffwww.itn.liu.se/~stegu/aqsis/aqsis-newnoise/
            </summary>
        </member>
        <member name="M:FreneticGameCore.SimplexNoiseInternal.Generate(System.Double)">
            <summary>
            1D simplex noise
            </summary>
            <param name="x">.</param>
            <returns>.</returns>
        </member>
        <member name="M:FreneticGameCore.SimplexNoiseInternal.Generate(System.Double,System.Double)">
            <summary>
            2D simplex noise
            </summary>
            <param name="x">.</param>
            <param name="y">.</param>
            <returns>.</returns>
        </member>
        <member name="M:FreneticGameCore.SimplexNoiseInternal.Generate(System.Double,System.Double,System.Double)">
            <summary>
            3D simplex noise
            </summary>
            <param name="x">.</param>
            <param name="y">.</param>
            <param name="z">.</param>
            <returns>.</returns>
        </member>
        <member name="T:FreneticGameCore.SysConsole">
            <summary>
            A helper wrapper for the System Console.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SysConsole.Waiting">
            <summary>
            All currently waiting messages.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SysConsole.ConsoleLock">
            <summary>
            Locker for the console.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SysConsole.WriteLock">
            <summary>
            Locker for writing.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SysConsole.ConsoleOutputThread">
            <summary>
            The thread being used for console output.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SysConsole.ConsoleOutputCanceller">
            <summary>
            Helper to cancel the console output thread.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SysConsole.ShutDown">
            <summary>
            Closes the SysConsole.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SysConsole.AllowCursor">
            <summary>
            Whether to allow the cursor on this console.
            IE, should the console show a ">" at the end.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SysConsole.Init">
            <summary>
            Prepares the system console.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SysConsole.Title">
            <summary>
            The console title.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SysConsole.FixTitle">
            <summary>
            Fixes the title of the system console to how the Client expects it.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SysConsole.HideConsole">
            <summary>
            Hides the system console from view.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SysConsole.ShowConsole">
            <summary>
            Shows (un-hides) the system console.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SysConsole.WriteLine(System.String,System.String)">
            <summary>
            Writes a line of colored text to the system console.
            </summary>
            <param name="text">The text to write.</param>
            <param name="bcolor">The base color.</param>
        </member>
        <member name="F:FreneticGameCore.SysConsole.Written">
            <summary>
            Event fired when the console is written to.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SysConsole.Write(System.String,System.String)">
            <summary>
            Writes some colored text to the system console.
            </summary>
            <param name="text">The text to write.</param>
            <param name="bcolor">The base color.</param>
        </member>
        <member name="M:FreneticGameCore.SysConsole.Output(System.String,System.Exception)">
            <summary>
            Outputs an exception with a message explaining the source of the exception.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FreneticGameCore.SysConsole.Output(System.Exception)">
            <summary>
            Outputs an exception.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:FreneticGameCore.SysConsole.OutputCustom(System.String,System.String,System.String)">
            <summary>
            Outputs custom debug information.
            </summary>
            <param name="type">The custom type.</param>
            <param name="message">The message.</param>
            <param name="bcolor">The custom base color.</param>
        </member>
        <member name="F:FreneticGameCore.SysConsole.ShouldOutputDebug">
            <summary>
            Can be replaced to control whether the SysConsole should output debug data.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SysConsole.Output(FreneticGameCore.OutputType,System.String,System.String)">
            <summary>
            Properly formats system console output.
            </summary>
            <param name="ot">What type of output to use.</param>
            <param name="text">The text to output.</param>
            <param name="bcolor">The base color.</param>
        </member>
        <member name="F:FreneticGameCore.SysConsole.OutputColors">
            <summary>
            Contains the default set of output colors.
            </summary>
        </member>
        <member name="F:FreneticGameCore.SysConsole.OutputNames">
            <summary>
            Contains the default set of output type names.
            </summary>
        </member>
        <member name="T:FreneticGameCore.ConsoleWrittenEventArgs">
            <summary>
            An event arguments for when the <see cref="T:FreneticGameCore.SysConsole"/> is written to.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ConsoleWrittenEventArgs.Text">
            <summary>
            The written text.
            </summary>
        </member>
        <member name="F:FreneticGameCore.ConsoleWrittenEventArgs.BColor">
            <summary>
            The base color written with.
            </summary>
        </member>
        <member name="T:FreneticGameCore.OutputType">
            <summary>
            All possible console output types.
            </summary>
        </member>
        <member name="F:FreneticGameCore.OutputType.NONE">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="F:FreneticGameCore.OutputType.CLIENTINFO">
            <summary>
            When the client is sending information to console.
            </summary>
        </member>
        <member name="F:FreneticGameCore.OutputType.INIT">
            <summary>
            During the startup sequence.
            </summary>
        </member>
        <member name="F:FreneticGameCore.OutputType.WARNING">
            <summary>
            An ignorable error.
            </summary>
        </member>
        <member name="F:FreneticGameCore.OutputType.ERROR">
            <summary>
            A major error.
            </summary>
        </member>
        <member name="F:FreneticGameCore.OutputType.INFO">
            <summary>
            General information.
            </summary>
        </member>
        <member name="F:FreneticGameCore.OutputType.DEBUG">
            <summary>
            Disable-able minor debug information.
            </summary>
        </member>
        <member name="F:FreneticGameCore.OutputType.CLIENTINIT">
            <summary>
            Initialization from the client
            </summary>
        </member>
        <member name="T:FreneticGameCore.SystemExtensions">
            <summary>
            Helpers for various system classes.
            </summary>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.ToLowerFast(System.String)">
            <summary>
            Rapidly converts a string to a lowercase representation.
            </summary>
            <param name="input">The original string.</param>
            <returns>A lowercase version.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.StartsWithNull(System.String)">
            <summary>
            Returns whether the string starts with a null character.
            </summary>
            <param name="input">The input string.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.SplitFast(System.String,System.Char,System.Int32)">
            <summary>
            Quickly split a string.
            </summary>
            <param name="input">The original string.</param>
            <param name="splitter">What to split it by.</param>
            <param name="count">The maximum number of times to split it.</param>
            <returns>The split string pieces.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.AxisAngleFor(BEPUutilities.Quaternion,BEPUutilities.Vector3)">
            <summary>
            Get the angle around an axis for a specific quaternion.
            </summary>
            <param name="rotation">The quaternion.</param>
            <param name="axis">The relative axis.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.AsEnumerable``1(System.Globalization.TextElementEnumerator)">
            <summary>
            Converts a <see cref="T:System.Globalization.TextElementEnumerator"/> to an Enumerable.
            </summary>
            <typeparam name="T">The expected Enumerable type.</typeparam>
            <param name="enumerator">The original Enumerator.</param>
            <returns>The enumerable.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.Before(System.String,System.String)">
            <summary>
            Gets the part of a string before a specified portion.
            </summary>
            <param name="input">The original string.</param>
            <param name="match">The end marker.</param>
            <returns>The prior portion.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.BeforeAndAfter(System.String,System.String,System.String@)">
            <summary>
            Gets the parts of a string before and after a specified portion.
            </summary>
            <param name="input">The original string.</param>
            <param name="match">The end marker.</param>
            <param name="after">The output of the latter portion.</param>
            <returns>The prior portion.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.After(System.String,System.String)">
            <summary>
            Gets the part of a string after a specified portion.
            </summary>
            <param name="input">The original string.</param>
            <param name="match">The end marker.</param>
            <returns>The latter portion.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.NextGaussian(System.Random)">
            <summary>
            Gets a Gaussian random value from a Random object.
            </summary>
            <param name="input">The random object.</param>
            <returns>The Gaussian value.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.Rescale(BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape,System.Double)">
            <summary>
            Rescales a convex hull shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="scaleFactor">The scaling factor.</param>
            <returns>The new hull.</returns>
        </member>
        <member name="M:FreneticGameCore.SystemExtensions.Rescale(BEPUphysics.CollisionShapes.ConvexShapes.ConvexHullShape,BEPUutilities.Vector3)">
            <summary>
            Rescales a convex hull shape.
            </summary>
            <param name="shape">The shape.</param>
            <param name="scaleFactor">The scaling factor.</param>
            <returns>The new hull.</returns>
        </member>
        <member name="T:FreneticGameCore.TextStyle">
            <summary>
            Holds all text styles to be used... (mainly by the SysConsole, can be used elsewhere).
            </summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Default">
            <summary>Default style: ^r^7</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Reset">
            <summary>Reset style: ^r</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Bold">
            <summary>Bold style: ^b</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Italic">
            <summary>Italic style: ^i</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Transparent">
            <summary>Transparent style: ^t</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Opaque">
            <summary>Opaque style: ^o</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.White">
            <summary>White color: ^7</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Simple">
            <summary>Simple style: ^r^7</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Standout">
            <summary>Standout style: ^r^0^h^5</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Readable">
            <summary>Readable style: ^r^7^e^0^b</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Chat">
            <summary>Chat style: ^r^2^d</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Error">
            <summary>Error style: ^r^0^h^3</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Warning">
            <summary>Warning style: ^r^0^h^1</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Commandhelp">
            <summary>Commandhelp style: ^r^0^h^1</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Separate">
            <summary>Separate style: ^r^5</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Outgood">
            <summary>Good output style: ^r^2</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Outbad">
            <summary>Bad output style: ^r^1</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Importantinfo">
            <summary>Important information style: ^r^3</summary>
        </member>
        <member name="F:FreneticGameCore.TextStyle.Color_Base">
            <summary>Base coloring style: ^B</summary>
        </member>
        <member name="T:FreneticGameCore.Utilities">
            <summary>
            Helpful utilities for general usage.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Utilities.DefaultEncoding">
            <summary>
            A UTF-8 without BOM encoding.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Utilities.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two.
            Meaning, the next number in the sequence:
            2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, ...
            Result is >= input.
            </summary>
            <param name="x">The value, less than or equal to the result.</param>
            <returns>The result, greater than or equal to the value.</returns>
        </member>
        <member name="P:FreneticGameCore.Utilities.UtilRandom">
            <summary>
            A thread-static random object for all non-deterministic objects to use.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Utilities.intRandom">
            <summary>
            A thread-static random provider.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Utilities.sha512">
            <summary>
            An SHA-512 hashing helper.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Utilities.salt1">
            <summary>
            Password static salt part 1.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Utilities.salt2">
            <summary>
            Password static salt part 2.
            </summary>
        </member>
        <member name="F:FreneticGameCore.Utilities.salt3">
            <summary>
            Password static salt part 3.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Utilities.HashQuick(System.String,System.String)">
            <summary>
            Quickly gets a Base-64 string of a hashed password input.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>A hash code.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToUShort(System.Byte[])">
            <summary>
            Converts a byte array to a ushort.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The actual value of it.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToFloat(System.Byte[])">
            <summary>
            Converts a byte array to a float.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The actual value of it.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToDouble(System.Byte[])">
            <summary>
            Converts a byte array to a double.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The actual value of it.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.CharToBytes(System.Char)">
            <summary>
            Converts a character to a byte array.
            </summary>
            <param name="ch">The actual value of it.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.ShortToBytes(System.Int16)">
            <summary>
            Converts a short to a byte array.
            </summary>
            <param name="sh">The actual value of it.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.UShortToBytes(System.UInt16)">
            <summary>
            Converts a ushort to a byte array.
            </summary>
            <param name="ush">The actual value of it.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.FloatToBytes(System.Single)">
            <summary>
            Converts a float to a byte array.
            </summary>
            <param name="flt">The actual value of it.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.DoubleToBytes(System.Double)">
            <summary>
            Converts a double to a byte array.
            </summary>
            <param name="flt">The actual value of it.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToChar(System.Byte[])">
            <summary>
            Converts a byte array to a character.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The actual value of it.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToShort(System.Byte[])">
            <summary>
            Converts a byte array to a short.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The actual value of it.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToInt(System.Byte[])">
            <summary>
            Converts a byte array to an int.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The actual value of it.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToUInt(System.Byte[])">
            <summary>
            Converts a byte array to an unsigned int.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The actual value of it.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToLong(System.Byte[])">
            <summary>
            Converts a byte array to a long.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The actual value of it.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToULong(System.Byte[])">
            <summary>
            Converts a byte array to an unsigned long.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The actual value of it.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.IntToBytes(System.Int32)">
            <summary>
            Converts an int to a byte array.
            </summary>
            <param name="intty">The actual value of it.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.UIntToBytes(System.UInt32)">
            <summary>
            Converts an unsigned int to a byte array.
            </summary>
            <param name="intty">The actual value of it.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.LongToBytes(System.Int64)">
            <summary>
            Converts a long to a byte array.
            </summary>
            <param name="intty">The actual value of it.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.ULongToBytes(System.UInt64)">
            <summary>
            Converts an unsigned long to a byte array.
            </summary>
            <param name="intty">The actual value of it.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.CheckException(System.Exception)">
            <summary>
            Checks an exception for rethrow necessity.
            </summary>
            <param name="ex">The exception to check.</param>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesPartial(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Grabs a sub section of a byte array.
            TODO: Reduce need for BytesPartial in packets via adding an index to BytesTo[Type]!
            </summary>
            <param name="full">The original byte array.</param>
            <param name="start">The start index.</param>
            <param name="length">The length.</param>
            <returns>The subset.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.StepTowards(System.Double,System.Double,System.Double)">
            <summary>
            Steps a value towards a goal by a specified amount, automatically moving the correct direction (positive or negative) and preventing going past the goal.
            </summary>
            <param name="start">The initial value.</param>
            <param name="target">The goal value.</param>
            <param name="amount">The amount to step by.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.IsCloseTo(System.Double,System.Double,System.Double)">
            <summary>
            Returns whether a number is close to another number, within a specified range.
            </summary>
            <param name="one">The first number.</param>
            <param name="target">The second number.</param>
            <param name="amount">The range.</param>
            <returns>Whether it's close.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.StringToFloat(System.String)">
            <summary>
            Converts a string to a double. Returns 0 if the string is not a valid double.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>The converted double.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.StringToDouble(System.String)">
            <summary>
            Converts a string to a double. Returns 0 if the string is not a valid double.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>The converted double.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.StringToUShort(System.String)">
            <summary>
            Converts a string to a ushort. Returns 0 if the string is not a valid ushort.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>The converted ushort.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.StringToInt(System.String)">
            <summary>
            Converts a string to a int. Returns 0 if the string is not a valid int.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>The converted int.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.StringToLong(System.String)">
            <summary>
            Converts a string to a long. Returns 0 if the string is not a valid long.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>The converted long.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.DateTimeToString(System.DateTime)">
            <summary>
            Returns a string representation of the specified time.
            </summary>
            <returns>The time as a string.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.Pad(System.String,System.Char,System.Int32,System.Boolean)">
            <summary>
            Pads a string to a specified length with a specified input, on a specified side.
            </summary>
            <param name="input">The original string.</param>
            <param name="padding">The symbol to pad with.</param>
            <param name="length">How far to pad it to.</param>
            <param name="left">Whether to pad left (true), or right (false).</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.CopyText(System.String,System.Int32)">
            <summary>
            Returns a peice of text copied a specified number of times.
            </summary>
            <param name="text">What text to copy.</param>
            <param name="times">How many times to copy it.</param>
            <returns>.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.CountCharacter(System.String,System.Char)">
            <summary>
            Returns the number of times a character occurs in a string.
            </summary>
            <param name="input">The string containing the character.</param>
            <param name="countme">The character which the string contains.</param>
            <returns>How many times the character occurs.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.Concat(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Combines a list of strings into a single string, separated by spaces.
            </summary>
            <param name="input">The list of strings to combine.</param>
            <param name="start">The index to start from.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.CleanStringInput(System.String)">
            <summary>
            If raw string data is input by a user, call this function to clean it for tag-safety.
            </summary>
            <param name="input">The raw string.</param>
            <returns>A cleaned string.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.IsColorSymbol(System.Char)">
            <summary>
            Used to identify if an input character is a valid color symbol (generally the character that follows a '^'), for use by RenderColoredText
            </summary>
            <param name="c"><paramref name="c"/>The character to check.</param>
            <returns>whether the character is a valid color symbol.</returns>
        </member>
        <member name="F:FreneticGameCore.Utilities.PI180">
            <summary>
            Represents the constant PI / 180.
            </summary>
        </member>
        <member name="M:FreneticGameCore.Utilities.ForwardVector(System.Double,System.Double)">
            <summary>
            Returns a one-length vector of the Yaw/Pitch angle input.
            </summary>
            <param name="yaw">The yaw angle, in radians.</param>
            <param name="pitch">The pitch angle, in radians.</param>
            <returns>.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.ForwardVector_Deg(System.Double,System.Double)">
            <summary>
            Returns a one-length vector of the Yaw/Pitch angle input in degrees
            </summary>
            <param name="yaw">The yaw angle, in radians.</param>
            <param name="pitch">The pitch angle, in radians.</param>
            <returns>.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.RotateVector(FreneticGameCore.Location,System.Double)">
            <summary>
            Rotates a vector by a certain yaw.
            </summary>
            <param name="vec">The original vector.</param>
            <param name="yaw">The yaw to rotate by.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.RotateVector(FreneticGameCore.Location,System.Double,System.Double)">
            <summary>
            Rotates a vector by a certain yaw and pitch.
            </summary>
            <param name="vec">The original vector.</param>
            <param name="yaw">The yaw to rotate by.</param>
            <param name="pitch">The pitch to rotate by.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.StringToQuat(System.String)">
            <summary>
            Converts a string to a quaternion.
            </summary>
            <param name="input">The string.</param>
            <returns>The quaternion, or the identity quaternion.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.QuatToString(BEPUutilities.Quaternion)">
            <summary>
            Converts a quaternion to a string.
            </summary>
            <param name="quat">The quaternion.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.QuaternionToBytes(BEPUutilities.Quaternion)">
            <summary>
            Converts a quaternion to a byte array.
            16 bytes.
            </summary>
            <param name="quat">The quaternion.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.BytesToQuaternion(System.Byte[],System.Int32)">
            <summary>
            Converts a byte array to a quaternion.
            </summary>
            <param name="dat">The byte array.</param>
            <param name="offset">The offset in the array.</param>
            <returns>The quaternion.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.LookAtLH(FreneticGameCore.Location,FreneticGameCore.Location,FreneticGameCore.Location)">
            <summary>
            Creates a Matrix that "looks at" a target from a location, left-hand notation.
            </summary>
            <param name="start">The starting coordinate.</param>
            <param name="end">The end target.</param>
            <param name="up">The normalized up vector.</param>
            <returns>A matrix.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.MatrixToAngles(BEPUutilities.Matrix)">
            <summary>
            Converts a matrix to Euler angles.
            </summary>
            <param name="WorldTransform">The matrix.</param>
            <returns>The Euler angles.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.AnglesToMatrix(FreneticGameCore.Location)">
            <summary>
            Converts Euler angles to a matrix.
            </summary>
            <param name="rot">The Euler angles.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.VectorToAngles(FreneticGameCore.Location)">
            <summary>
            Converts a forward vector to yaw/pitch angles.
            </summary>
            <param name="input">The forward vector.</param>
            <returns>The yaw/pitch angle vector.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.ValidateUsername(System.String)">
            <summary>
            Validates a username as correctly formatted.
            </summary>
            <param name="str">The username to validate.</param>
            <returns>Whether the username is valid.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.HaltonSequence(System.Int32,System.Int32)">
            <summary>
            Calculates a Halton Sequence result.
            </summary>
            <param name="index">The index.</param>
            <param name="basen">The base number, should be prime.</param>
        </member>
        <member name="M:FreneticGameCore.Utilities.FormatNumber(System.Int64)">
            <summary>
            Formats a long with "123,456" style notation.
            </summary>
            <param name="input">The number.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:FreneticGameCore.Utilities.Project(BEPUutilities.Vector3,BEPUutilities.Vector3)">
            <summary>
            Projects a vector onto another.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="T:FreneticGameCore.IntHolder">
            <summary>
            Holds a volatile integer.
            TODO: Delete?
            </summary>
        </member>
        <member name="F:FreneticGameCore.IntHolder.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:FreneticGameCore.DataHolder`1">
            <summary>
            Holds any data in a class object.
            </summary>
            <typeparam name="T">The type of data to holder.</typeparam>
        </member>
        <member name="F:FreneticGameCore.DataHolder`1.Data">
            <summary>
            The held data.
            </summary>
        </member>
        <member name="T:System.IO.Compression.ZipStorer">
            <summary>
            Unique class for compression/decompression file. Represents a Zip file.
            </summary>
        </member>
        <member name="T:System.IO.Compression.ZipStorer.Compression">
            <summary>
            Compression method enumeration
            </summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.Compression.Store">
            <summary>Uncompressed storage</summary> 
        </member>
        <member name="F:System.IO.Compression.ZipStorer.Compression.Deflate">
            <summary>Deflate compression method</summary>
        </member>
        <member name="T:System.IO.Compression.ZipStorer.ZipFileEntry">
            <summary>
            Represents an entry in Zip file directory
            </summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.Method">
            <summary>Compression method</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.FilenameInZip">
            <summary>Full path and filename as stored in Zip</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.FileSize">
            <summary>Original file size</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.CompressedSize">
            <summary>Compressed file size</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.HeaderOffset">
            <summary>Offset of header information inside Zip storage</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.FileOffset">
            <summary>Offset of file inside Zip storage</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.HeaderSize">
            <summary>Size of header information</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.Crc32">
            <summary>32-bit checksum of entire file</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.ModifyTime">
            <summary>Last modification time of file</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.Comment">
            <summary>User comment for file</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.EncodeUTF8">
            <summary>True if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.ZipFileEntry.ToString">
            <summary>Overriden method</summary>
            <returns>Filename in Zip.</returns>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.EncodeUTF8">
            <summary>True if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ForceDeflating">
            <summary>Force deflate algotithm even if it inflates the stored file. Off by default.</summary>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Create(System.String,System.String)">
            <summary>
            Method to create a new storage file
            </summary>
            <param name="_filename">Full path of Zip file to create.</param>
            <param name="_comment">General comment for Zip file.</param>
            <returns>A valid ZipStorer object.</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Create(System.IO.Stream,System.String)">
            <summary>
            Method to create a new zip storage in a stream
            </summary>
            <param name="_stream">.</param>
            <param name="_comment">.</param>
            <returns>A valid ZipStorer object.</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Open(System.String,System.IO.FileAccess)">
            <summary>
            Method to open an existing storage file
            </summary>
            <param name="_filename">Full path of Zip file to open.</param>
            <param name="_access">File access mode as used in FileStream constructor.</param>
            <returns>A valid ZipStorer object.</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Open(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Method to open an existing storage from stream
            </summary>
            <param name="_stream">Already opened stream with zip contents.</param>
            <param name="_access">File access mode for stream operations.</param>
            <returns>A valid ZipStorer object.</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.AddFile(System.IO.Compression.ZipStorer.Compression,System.String,System.String,System.String)">
            <summary>
            Add full contents of a file into the Zip storage
            </summary>
            <param name="_method">Compression method.</param>
            <param name="_pathname">Full path of file to add to Zip storage.</param>
            <param name="_filenameInZip">Filename and path as desired in Zip directory.</param>
            <param name="_comment">Comment for stored file.</param>        
        </member>
        <member name="M:System.IO.Compression.ZipStorer.AddStream(System.IO.Compression.ZipStorer.Compression,System.String,System.IO.Stream,System.DateTime,System.String)">
            <summary>
            Add full contents of a stream into the Zip storage
            </summary>
            <param name="_method">Compression method.</param>
            <param name="_filenameInZip">Filename and path as desired in Zip directory.</param>
            <param name="_source">Stream object containing the data to store in Zip.</param>
            <param name="_modTime">Modification time of the data to store.</param>
            <param name="_comment">Comment for stored file.</param>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Close">
            <summary>
            Updates central directory (if pertinent) and close the Zip storage
            </summary>
            <remarks>This is a required step, unless automatic dispose is used</remarks>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.ReadCentralDir">
            <summary>
            Read all the file records in the central directory 
            </summary>
            <returns>List of all entries in directory.</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.ExtractFile(System.IO.Compression.ZipStorer.ZipFileEntry,System.String)">
            <summary>
            Copy the contents of a stored file into a physical file
            </summary>
            <param name="_zfe">Entry information of file to extract.</param>
            <param name="_filename">Name of file to store uncompressed data.</param>
            <returns>True if success, false if not..</returns>
            <remarks>Unique compression methods are Store and Deflate</remarks>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.ExtractFile(System.IO.Compression.ZipStorer.ZipFileEntry,System.IO.Stream)">
            <summary>
            Copy the contents of a stored file into an opened stream
            </summary>
            <param name="_zfe">Entry information of file to extract.</param>
            <param name="_stream">Stream to store the uncompressed data.</param>
            <returns>True if success, false if not..</returns>
            <remarks>Unique compression methods are Store and Deflate</remarks>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.RemoveEntries(System.IO.Compression.ZipStorer@,System.Collections.Generic.List{System.IO.Compression.ZipStorer.ZipFileEntry})">
            <summary>
            Removes one of many files in storage. It creates a new Zip file.
            </summary>
            <param name="_zip">Reference to the current Zip object.</param>
            <param name="_zfes">List of Entries to remove from storage.</param>
            <returns>True if success, false if not.</returns>
            <remarks>This method only works for storage of type FileStream</remarks>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Dispose(System.Boolean)">
            <summary>
            Screw microsoft.
            </summary>
            <param name="disposing">If you input false, screw you.</param>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Dispose">
            <summary>
            Closes the Zip file stream
            </summary>
        </member>
    </members>
</doc>
